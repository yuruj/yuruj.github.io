<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yuruj Blog</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 17 Sep 2020 12:03:12 +0800</pubDate>
    <lastBuildDate>Thu, 17 Sep 2020 12:03:12 +0800</lastBuildDate>
    <generator>Jekyll v4.1.1</generator>
    
      <item>
        <title>《汇编语言》（第一到五章</title>
        <description>&lt;h1 id=&quot;第一章-基础知识&quot;&gt;第一章 基础知识&lt;/h1&gt;

&lt;p&gt;汇编语言是直接在硬件之上工作的编程语言，我们首先要了解硬件系统的结构，才能有效地应用汇编语言对其编程&lt;/p&gt;

&lt;p&gt;关于PC机及CPU物理结构和编程结构的全面研究，在《微机原理与接口》中进行；对于计算机一般的结构、功能、性能的研究在一门称为《组成原理》的理论层次更高的课程中进行&lt;/p&gt;

&lt;p&gt;汇编课程的研究重点在如何利用硬件系统的编程结构和指令集有效灵活的控制系统进行工作&lt;/p&gt;

&lt;h2 id=&quot;11-机器语言&quot;&gt;1.1 机器语言&lt;/h2&gt;

&lt;p&gt;机器语言是机器指令的集合。机器指令展开来讲就是一台机器可以正确执行的命令。电子计算机的机器指令是一列二进制数字。计算机将之转变为一列高低电平，以使计算机的电子器件受到驱动，进行运算&lt;/p&gt;

&lt;p&gt;现在，在我们常用的PC机中，有一个芯片来完成上面所说的计算机的功能。这个芯片就是CPU，微处理器。以后我们提到的计算机是指由CPU和其他受CPU直接或间接控制的芯片、器件、设备组成的计算机系统，比如我们常见的PC机&lt;/p&gt;

&lt;p&gt;每一种微处理器，由于硬件设计和内部结构的不同，就需要用不同的电平脉冲来控制，使他工作。所以每一种微处理器都有自己的机器指令集，也就是机器语言&lt;/p&gt;

&lt;h2 id=&quot;12-汇编语言的产生&quot;&gt;1.2 汇编语言的产生&lt;/h2&gt;

&lt;p&gt;汇编语言的主体是汇编指令。汇编指令和机器指令的差别在于指令的表示方法上。汇编指令是机器指令便于记忆的书写格式&lt;/p&gt;

&lt;p&gt;mov ax,bx 寄存器BX的内容送到AX中&lt;/p&gt;

&lt;p&gt;寄存器，简单地讲是CPU中可以存储数据的器件，一个CPU中有多个寄存器。AX是其中一个寄存器的代号，BX是另一个寄存器的代号&lt;/p&gt;

&lt;p&gt;编译器，程序员用汇编语言写出源程序，再用汇编编译器将其编译为机器码，由计算机最终执行&lt;/p&gt;

&lt;h2 id=&quot;13-汇编语言的组成&quot;&gt;1.3 汇编语言的组成&lt;/h2&gt;

&lt;p&gt;（1）汇编指令：机器码的助记符，有对应的机器码&lt;/p&gt;

&lt;p&gt;（2）伪指令：没有对应的机器码，由编译器识别，没有对应的机器码&lt;/p&gt;

&lt;p&gt;（3）其他符号：如+、-、*、/等，由编译器识别，没有对应的机器码&lt;/p&gt;

&lt;p&gt;汇编语言的核心是汇编指令，他决定了汇编语言的特性&lt;/p&gt;

&lt;h2 id=&quot;14-存储器&quot;&gt;1.4 存储器&lt;/h2&gt;

&lt;p&gt;要想让CPU工作，就必须向他提供指令和数据。指令和数据在存储器中存放，也就是我们平时所说的内存。磁盘不同于内存，磁盘上的数据或程序如果不读到内存中，就无法被CPU使用&lt;/p&gt;

&lt;h2 id=&quot;15-指令和数据&quot;&gt;1.5 指令和数据&lt;/h2&gt;

&lt;p&gt;指令和数据是应用上的概念。在内存或磁盘上，指令和数据没有任何区别，都是二进制信息&lt;/p&gt;

&lt;h2 id=&quot;16-存储单元&quot;&gt;1.6 存储单元&lt;/h2&gt;

&lt;p&gt;存储器被划分为若干个存储单元，每个存储单元从0开始顺序编号&lt;/p&gt;

&lt;p&gt;微型机存储器的存储单元可以存储一个Byte，及8个二进制位。一个存储器有128个存储单元&lt;/p&gt;

&lt;p&gt;磁盘的容量单位同内存的一样，实际上以上单位是微机中常用的计量单位&lt;/p&gt;

&lt;h2 id=&quot;17-cpu对存储器的读写&quot;&gt;1.7 CPU对存储器的读写&lt;/h2&gt;

&lt;p&gt;CPU要从内存中读数据，首先要指定存储单元的地址。也就是说他要先确定他要读取哪一个存储单元中的数据&lt;/p&gt;

&lt;p&gt;另外，在一台微机中，不只有存储器这一种器件。CPU在读写数据时还要指明，他要对哪一个器件进行操作，进行哪种操作，是从中读出数据，还是向里面写入数据&lt;/p&gt;

&lt;p&gt;CPU要进行数据的读写，必须和外部器件（标准的说法是芯片）进行下面3类信息的交互：&lt;/p&gt;

&lt;p&gt;1、存储单元的地址（地址信息）&lt;/p&gt;

&lt;p&gt;2、器件的选择，读或写的命令（控制信息）&lt;/p&gt;

&lt;p&gt;3、读或写的数据（数据信息）&lt;/p&gt;

&lt;p&gt;电子计算机能传输、处理的信息都是电信号，电信号当然要用导线传送。在计算机中有专门连接CPU和其他芯片的导线，通常称为总线。总线从物理上来讲，就是一根根导线的集合。根据传输的信息的不同，总线上从逻辑上又分为3类，地址总线、控制总线和数据总线&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-07 下午6.15.37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;18-地址总线&quot;&gt;1.8 地址总线&lt;/h2&gt;

&lt;p&gt;地址总线上能传送多少个不同的信息，CPU就可以对多少个存储单元进行寻址&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-07 下午6.19.20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;19-数据总线&quot;&gt;1.9 数据总线&lt;/h2&gt;

&lt;p&gt;CPU与内存或其他器件之间的数据传送是通过数据总线来进行的。数据总线的宽度决定了CPU和外界的数据传送速度。8根数据总线一次可传送一个8位二进制数据。16根数据总线一次可传送两个字节&lt;/p&gt;

&lt;h2 id=&quot;110-控制总线&quot;&gt;1.10 控制总线&lt;/h2&gt;

&lt;p&gt;CPU对外部器件的控制是通过控制总线来进行的&lt;/p&gt;

&lt;p&gt;控制总线是一些不同控制线的集合。有多少根控制总线，就意味着CPU提供了对外部器件的多少种控制。所以，控制总线的宽度决定了CPU对外部器件的控制能力&lt;/p&gt;

&lt;p&gt;前面所讲的内存读或写命令是由几根控制线综合发出的，其中有一根称为读信号输出的控制线负责由CPU向外传送读信号，CPU向该控制线上输出低电平表示将要读取数据，有一根称为写信号输出的控制线则负责传送写信号&lt;/p&gt;

&lt;h2 id=&quot;111内存地址空间&quot;&gt;1.11内存地址空间&lt;/h2&gt;

&lt;p&gt;如果一个CPU的地址总线高度为10，那么可以寻址1024个内存单元，这1024个可寻到的内存单元就构成这个CPU的内存地址空间&lt;/p&gt;

&lt;h2 id=&quot;112-主板&quot;&gt;1.12 主板&lt;/h2&gt;

&lt;p&gt;在每一台PC机中，都有一个主板，主板上有核心器件和一些主要器件，这些器件通过总线（地址总线、数据总线、控制总线）相连。这些器件有CPU、存储器、外围芯片组、拓展插槽等。拓展插槽上一般插有RAM内存条和各类接口卡&lt;/p&gt;

&lt;h2 id=&quot;113-接口卡&quot;&gt;1.13 接口卡&lt;/h2&gt;

&lt;p&gt;计算机系统中，所有可用程序控制其工作的设备，必须受到CPU的控制。CPU对外部设备都不能直接控制，如显示器、音响、打印机等。直接控制这些设备进行工作的是插在拓展插槽上的接口卡&lt;/p&gt;

&lt;p&gt;拓展插槽通过总线和CPU相连，所以接口卡也通过总线同CPU相连&lt;/p&gt;

&lt;p&gt;CPU可以直接控制这些接口卡，从而实现CPU对外设的间接控制。简单地讲，就是CPU通过总线向接口卡发送命令，接口卡根据CPU的命令控制外设进行工作&lt;/p&gt;

&lt;h2 id=&quot;114-各类存储器芯片&quot;&gt;1.14 各类存储器芯片&lt;/h2&gt;

&lt;p&gt;一台PC机中，装有多个存储器芯片，这些存储器芯片从物理连接上看是独立的、不同的器件。从读写属性上看分为两类：随机存储器（RAM）和只读存储器（ROM）。随机存储器可读可写，但必须带电存储，关机后存储的内容丢失；只读存储器只能读取不能写入，关机后其中的内容不丢失。这些存储器从功能和连接上又分为以下几类&lt;/p&gt;

&lt;p&gt;1、随机存储器&lt;/p&gt;

&lt;p&gt;用于存放供CPU使用的绝大部分程序和数据，主随机存储器一般由两个位置上的RAM组成，装在主板上RAM和插在拓展插槽上的RAM&lt;/p&gt;

&lt;p&gt;2、装有BIOS的ROM&lt;/p&gt;

&lt;p&gt;BIOS是由主板和各类接口卡（如显卡、网卡等）厂商提供的软件系统，可以通过它利用该硬件设备进行最基本的输入输出。在主板和某些接口卡上插有存储相应BIOS的ROM。例如，主板上的ROM存储着主板的BIOS（通常称为系统的BIOS）&lt;/p&gt;

&lt;p&gt;3、接口卡上的RAM&lt;/p&gt;

&lt;p&gt;某些接口卡需要对大批量输入、输出数据进行暂时存储，在其上装有RAM。最典型的是显示卡上的RAM，一般称为显存。显示卡随时将显存中的数据向显示器上输出。换句话说，我们将需要显示的内容写入显存，就会出现在显示器上&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-07 下午7.27.09.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;115-内存地址空间&quot;&gt;1.15 内存地址空间&lt;/h2&gt;

&lt;p&gt;上述的那些存储器，在物理上是独立的器件，但是在以下两点上相同&lt;/p&gt;

&lt;p&gt;1、都和CPU的总线相连&lt;/p&gt;

&lt;p&gt;2、CPU对他们进行读或写的时候都通过控制线发出内存读写命令&lt;/p&gt;

&lt;p&gt;这也就是说，CPU在操控他们的时候，把他们都当作内存来对待，把他们总的看作一个由若干存储单元组成的逻辑存储器，这个逻辑存储器就是我们所说的内存地址空间&lt;/p&gt;

&lt;p&gt;在汇编这门课中，我们所面对的是内存地址空间&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-07 下午7.31.59.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所有的物理存储器被看作一个由若干存储单元组成的逻辑存储器，每个物理存储器在这个逻辑存储器中占有一个地址段，即一段地址空间。CPU在这段地址空间中读写数据，实际上就是在相对应的物理存储器中读写数据&lt;/p&gt;

&lt;p&gt;内存地址空间的大小受CPU地址总线宽度的限制。8086CPU的地址总线宽度为20，可以传送2^20^个不同的地址信息，则8086PC的内存地址空间大小为1MB&lt;/p&gt;

&lt;p&gt;我们在基于一个计算机硬件系统编程的时候，必须知道这个系统中的内存地址空间分配情况。因为当我们想在某类存储器中读写数据的时候，必须知道他的第一个单元的地址和最后一个单元的地址，才能保证读写操作是在预期的存储器中进行&lt;/p&gt;

&lt;p&gt;不同的计算机系统的内存地址空间的分配情况是不同的&lt;/p&gt;

&lt;h1 id=&quot;第2章-寄存器&quot;&gt;第2章 寄存器&lt;/h1&gt;

&lt;p&gt;一个典型的CPU由运算器、控制器、寄存器（CPU工作原理）等器件构成，这些器件靠内部总线相连&lt;/p&gt;

&lt;p&gt;在CPU中：&lt;/p&gt;

&lt;p&gt;运算器进行信息处理&lt;/p&gt;

&lt;p&gt;寄存器进行信息存储&lt;/p&gt;

&lt;p&gt;控制器控制各种器件进行工作&lt;/p&gt;

&lt;p&gt;内部总线连接各种器件，在他们之间进行数据的传送&lt;/p&gt;

&lt;p&gt;对于一个汇编程序猿来说，CPU中的主要部件是寄存器。寄存器是CPU中程序员可以用指令读写的部件。程序员通过改变各种寄存器中的内容来实现对CPU的控制&lt;/p&gt;

&lt;p&gt;不同的CPU，寄存器的个数、结构是不相同的。8086CPU有14个寄存器，每个寄存器有一个名称。这些寄存器是：AX、BX、CX、DX、SI、DI、SP、BP、IP、CS、SS、DS、ES、PSW&lt;/p&gt;

&lt;h2 id=&quot;21-通用寄存器&quot;&gt;2.1 通用寄存器&lt;/h2&gt;

&lt;p&gt;8086CPU的所有寄存器都是16位的，可以存放两个字节。AX、BX、CX、DX这4个寄存器通常用来存放一般性的数据，被称为通用寄存器&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-07 下午7.53.45.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;8086CPU的上一代CPU中的寄存器都是8位的，为了保证兼容，使原来基于上一代CPU编写的程序稍加修改就可以运行在8086上，8086CPU的AX、BX、CX、DX这4个寄存器都分为两个可独立使用的8位寄存器来用：&lt;/p&gt;

&lt;p&gt;AX可分为AH和AL；BX可分为BH和BL；CX可分为CH和CL；DX可分为DH和DL&lt;/p&gt;

&lt;h2 id=&quot;22-字在寄存器中的存储&quot;&gt;2.2 字在寄存器中的存储&lt;/h2&gt;

&lt;p&gt;出于对兼容性的考虑，8086CPU可以一次性处理以下两种尺寸的数据&lt;/p&gt;

&lt;p&gt;字节：byte，一个字节由8个bit组成，可以存在8位寄存器中&lt;/p&gt;

&lt;p&gt;字：word，一个字由两个字节组成，这两个字节分别称为这个字的高位字节和低位字节&lt;/p&gt;

&lt;p&gt;为了区分不同的进制，在16进制表示的数据后面加H，在二进制表示的数据后面加B，十进制表示的数据后面什么也不加&lt;/p&gt;

&lt;h2 id=&quot;23-几条汇编指令&quot;&gt;2.3 几条汇编指令&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-07 下午8.03.10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-07 下午8.18.27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在进行数据传送或运算时，要注意指令的两个操作对象的位数应当是一致的&lt;/p&gt;

&lt;h2 id=&quot;24-物理地址&quot;&gt;2.4 物理地址&lt;/h2&gt;

&lt;p&gt;CPU访问内存单元时，要给出内存单元的地址。所有的内存单元构成的存储空间是一个一维的线性空间。我们将这个唯一的地址称为物理地址&lt;/p&gt;

&lt;p&gt;CPU通过地址总线送入存储器的，必须是一个内存单元的物理地址。在CPU向地址总线上发出物理地址之前，必须要在内部先形成这个物理地址，不同的CPU可以有不同的形成物理地址的方式。我们现在讨论8086CPU是如何在内部形成内存单元的物理地址的&lt;/p&gt;

&lt;h2 id=&quot;25-16位结构的cpu&quot;&gt;2.5 16位结构的CPU&lt;/h2&gt;

&lt;p&gt;概括的将，16位结构（16位机、字长为16位等常见说法，与16位结构的含义相同）描述了一个CPU具有以下几方面的结构特性&lt;/p&gt;

&lt;p&gt;1、运算器一次最多可以处理16位的数据&lt;/p&gt;

&lt;p&gt;2、寄存器的最大宽度为16位&lt;/p&gt;

&lt;p&gt;3、寄存器和运算器之间的通路为16位&lt;/p&gt;

&lt;p&gt;8086是16位结构的CPU，这也就是说，在8086内部，能够一次性处理、传输、暂时存储的信息的最大长度是16位的。内存单元的地址在送上地址总线之前，必须在CPU中处理、传输、暂时存放，对于16位CPU，能一次性处理、传输、暂时存储16位的地址&lt;/p&gt;

&lt;h2 id=&quot;26-8086cpu给出物理地址的方法&quot;&gt;2.6 8086CPU给出物理地址的方法&lt;/h2&gt;

&lt;p&gt;8086CPU有20位地址总线，可以传送20位地址，达到1MB寻址能力。8086CPU又是16位结构，在内部一次性处理、传输、暂时存储的地址为16位。从8086CPU的内部结构来看，如果将地址从内部简单的发出，那么它只能送出16位的地址，表现出的寻址能力只有64KB&lt;/p&gt;

&lt;p&gt;8086CPU采用一种在内部用两个16位地址合成的方法来形成一个20位的物理地址&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-07 下午8.53.55.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（1）CPU中的相关部件提供两个16位的地址，一个称为段地址，另一个称为偏移地址&lt;/p&gt;

&lt;p&gt;（2）段地址和偏移地址通过内部总线送入一个称为地址加法器的部件&lt;/p&gt;

&lt;p&gt;（3）地址加法器将两个16位地址合成为一个20位的物理地址&lt;/p&gt;

&lt;p&gt;（4）地址加法器通过内部总线将20位物理地址送入输入输出控制电路&lt;/p&gt;

&lt;p&gt;（5）输入输出控制电路将20位物理地址送上地址总线&lt;/p&gt;

&lt;p&gt;（6）20位物理地址被地址总线传送到存储器&lt;/p&gt;

&lt;p&gt;地址加法器采用物理地址=段地址x16+偏移地址的方法用段地址和偏移地址合成物理地址&lt;/p&gt;

&lt;p&gt;段地址x16有一个更为常用的说法是左移4位&lt;/p&gt;

&lt;h2 id=&quot;27-段地址x16偏移地址物理地址的本质含义&quot;&gt;2.7 段地址x16+偏移地址=物理地址的本质含义&lt;/h2&gt;

&lt;p&gt;CPU在访问内存时，用一个基础地址和一个相对于基础地址的偏移地址相加，给出内存单元的物理地址&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-07 下午9.03.16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;28-段的概念&quot;&gt;2.8 段的概念&lt;/h2&gt;

&lt;p&gt;内存并没有分段，段的划分来自于CPU&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-07 下午9.09.03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以后，在编程时可以根据需要，将若干地址连续的内存单元看作一个段，用段地址x16定位段的起始地址（基础地址），用偏移地址定位段中的内存单元。有两点需要注意：段地址x16必然是16的倍数，所以一个段的起始地址也一定是16的倍数；偏移地址为16位，16位地址的寻址能力为64KB，所以一个段的长度最大为64KB&lt;/p&gt;

&lt;h2 id=&quot;29-段寄存器&quot;&gt;2.9 段寄存器&lt;/h2&gt;

&lt;p&gt;8086CPU在访问内存时要由相关部件提供内存单元的段地址和偏移地址，送入地址加法器合成物理地址。这里，需要看一下，是什么部件提供段地址。段地址在8086CPU的段寄存器中存放。8086CPU有4个段寄存器：CS、DS、SS、ES。当8086CPU要访问内存时由这4个段寄存器提供内存单元的段地址&lt;/p&gt;

&lt;h2 id=&quot;210-cs和ip&quot;&gt;2.10 CS和IP&lt;/h2&gt;

&lt;p&gt;CS和IP是8086CPU中两个最关键的寄存器，他们指示了CPU当前要读取指令的地址。CS为代码段寄存器，IP为指令指针寄存器&lt;/p&gt;

&lt;p&gt;在8086CPUPC机中，任意时刻，设CS中的内容为M，IP中的内容为N，8086CPU将从内存MX16+N单元开始，读取一条指令并执行&lt;/p&gt;

&lt;p&gt;也可以这样表示：8086机中，任意时刻，CPU将CS:IP指向的内容当作指令执行&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-08 下午12.53.00.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-08 下午12.54.51.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-08 下午12.57.12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-08 下午12.57.33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-08 下午12.57.54.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-08 下午12.58.11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-08 下午1.00.19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过上面的过程展示，8086CPU的工作过程可以简要描述如下&lt;/p&gt;

&lt;p&gt;（1）从CS:IP指向的内存单元读取指令，读取的指令进入指令缓冲器&lt;/p&gt;

&lt;p&gt;（2）IP = IP + 所读取指令的长度，从而指向下一条指令&lt;/p&gt;

&lt;p&gt;（3）执行指令，转到步骤（1），重复这个过程&lt;/p&gt;

&lt;p&gt;在8086CPU加电启动或复位后（即CPU刚开始工作时）CS和IP被设置为CS=FFFFH，IP=0000H，即在8086PC机刚启动时，CPU从内存FFFF0H单元中读取指令执行，FFFF0H单元中的指令是8086PC机开机后执行的第一条指令&lt;/p&gt;

&lt;p&gt;在内存中，指令和数据没有任何区别。如果提出一个问题：CPU根据什么将内存中的信息看作指令？如何回答？我们可以说，CPU将CS:IP指向的内存单元中的内容看作指令，因为，在任何时候，CPU将CS、IP中的内容当作指令的段地址和偏移地址，用他们合成指令的物理地址，到内存中读取指令码，执行&lt;/p&gt;

&lt;h2 id=&quot;211-修改csip的指令&quot;&gt;2.11 修改CS、IP的指令&lt;/h2&gt;

&lt;p&gt;在CPU中，程序员能够用指令读写的部件只有寄存器，程序员可以通过改变寄存器中的内容实现对CPU的控制。CPU从何处执行指令是由CS、IP中的内容决定的，程序员可以通过改变CS、IP中的内容来控制CPU执行目标指令&lt;/p&gt;

&lt;p&gt;8086CPU大部分寄存器的值，都可以用mov指令来改变，mov指令被称为传送指令&lt;/p&gt;

&lt;p&gt;但是，mov指令不能用于设置CS、IP的值&lt;/p&gt;

&lt;p&gt;能够改变CS、IP的内容的指令被统称为转移指令。我们现在介绍一个最简单的可以修改CS、IP的指令：jmp指令&lt;/p&gt;

&lt;p&gt;jmp 段地址: 偏移地址 用指令中给出的段地址修改CS，偏移地址修改IP&lt;/p&gt;

&lt;p&gt;若想仅修改IP的内容，可用形如jmp 某一合法寄存器的指令完成&lt;/p&gt;

&lt;p&gt;jmp ax好似mov IP,ax&lt;/p&gt;

&lt;p&gt;适当的时候，可以用已知的汇编指令的语法来描述新学的汇编指令的功能&lt;/p&gt;

&lt;h2 id=&quot;212-代码段&quot;&gt;2.12 代码段&lt;/h2&gt;

&lt;p&gt;在编程时，可以根据需要，将一组内存单元定义为一个段&lt;/p&gt;

&lt;p&gt;将这一段内存当成代码段，仅仅是编程时的一种安排&lt;/p&gt;

&lt;h2 id=&quot;实验1-查看cpu和内存用机器指令和汇编指令编程&quot;&gt;实验1 查看CPU和内存，用机器指令和汇编指令编程&lt;/h2&gt;

&lt;h3 id=&quot;预备知识debug的使用&quot;&gt;预备知识：Debug的使用&lt;/h3&gt;

&lt;p&gt;Debug是DOS、Windows都提供的实模式（8086方式）程序的调试工具。使用它，可以查看CPU各种寄存器中的内容、内存的情况和在机器码级跟踪程序的运行&lt;/p&gt;

&lt;p&gt;Debug功能：&lt;/p&gt;

&lt;p&gt;R命令查看、改变CPU寄存器的内容&lt;/p&gt;

&lt;p&gt;D命令查看内存中的内容&lt;/p&gt;

&lt;p&gt;E命令改写内存中的内容&lt;/p&gt;

&lt;p&gt;U命令将内存中的机器指令翻译成汇编指令&lt;/p&gt;

&lt;p&gt;T命令执行一条机器指令&lt;/p&gt;

&lt;p&gt;A命令以汇编指令的格式在内存中写入一条机器指令&lt;/p&gt;

&lt;p&gt;Debug是在DOS方式下使用的程序&lt;/p&gt;

&lt;p&gt;进入DOS：&lt;/p&gt;

&lt;p&gt;1、重新启动计算机，进入DOS方式，此时进入的是实模式的DOS&lt;/p&gt;

&lt;p&gt;2、在Windows中进入DOS方式，此时进入的是虚拟8086模式的DOS&lt;/p&gt;

&lt;h4 id=&quot;用r命令查看改变cpu寄存器的内容&quot;&gt;用R命令查看、改变CPU寄存器的内容&lt;/h4&gt;

&lt;p&gt;-r&lt;/p&gt;

&lt;p&gt;-r ax&lt;/p&gt;

&lt;h4 id=&quot;用debug的d命令查看内存中的内容&quot;&gt;用Debug的D命令查看内存中的内容&lt;/h4&gt;

&lt;p&gt;-d 段地址:偏移地址&lt;/p&gt;

&lt;p&gt;Debug将列出从指定内存单元开始的128个内存单元的内容&lt;/p&gt;

&lt;p&gt;使用D命令，Debug将输出3部分内容：&lt;/p&gt;

&lt;p&gt;1、中间是从指定地址开始的128个内存单元的内容，用16进制的格式输出，每行的输出从16整数倍的地址开始，最多输出16个单元的内容。每行中间有一个-，他将每行的输出分为两部分&lt;/p&gt;

&lt;p&gt;2、左边是每行的起始地址&lt;/p&gt;

&lt;p&gt;3、右边是每个内存单元中的数据对应的可显示的ASCII代码。若没有对应可显示的ASCII字符，Debug就用.来代替&lt;/p&gt;

&lt;p&gt;我们用Debug看到的都是原来就在内存中的内容，这些内容受随时都有可能变化的系统环境的影响。当然，我们也可以改变内存、寄存器中的内容&lt;/p&gt;

&lt;p&gt;-d 一进入用D命令直接查看，将列出Debug预设的地址处的内容，在用过上面的那个之后在直接使用D命令，可列出后续的内容&lt;/p&gt;

&lt;p&gt;-d 段地址:偏移地址 结尾偏移地址 指定D命令的查看范围&lt;/p&gt;

&lt;h4 id=&quot;用debug的e命令改写内存中的内容&quot;&gt;用Debug的E命令改写内存中的内容&lt;/h4&gt;

&lt;p&gt;要将内存1000:0~1000:9单元中的内容分别写为0、1、2、3、4、5、6、7、8、9，可以用&lt;/p&gt;

&lt;p&gt;-e 起始地址 数据 数据 数据 …&lt;/p&gt;

&lt;p&gt;也可采用提问的方式来一个一个地改写内存中的内容&lt;/p&gt;

&lt;p&gt;-e 起始地址&lt;/p&gt;

&lt;p&gt;可以用E命令向内存中写入字符&lt;/p&gt;

&lt;p&gt;可以用E命令向内存中写入字符串（按多个字符处理而不是并入一个地方）&lt;/p&gt;

&lt;h4 id=&quot;用e命令向内存中写入机器码用u命令查看内存中机器码的含义用t命令执行内存中的机器码&quot;&gt;用E命令向内存中写入机器码，用U命令查看内存中机器码的含义，用T命令执行内存中的机器码&lt;/h4&gt;

&lt;p&gt;机器码也是数据，可以用E命令将机器码写入内存&lt;/p&gt;

&lt;p&gt;-u 起始地址 将内存单元中的内容翻译为汇编指令，并显示出来&lt;/p&gt;

&lt;p&gt;U命令的显示输出分为三部分，每一条机器指令的地址、机器指令、机器指令所对应的汇编指令&lt;/p&gt;

&lt;p&gt;简单的使用T命令可以执行CS:IP指向的指令&lt;/p&gt;

&lt;h4 id=&quot;用debug的a命令以汇编指令的形式在内存中写入机器指令&quot;&gt;用Debug的A命令以汇编指令的形式在内存中写入机器指令&lt;/h4&gt;

&lt;p&gt;前面我们使用E命令写入机器指令，这样做很不方便，最好能直接以汇编指令的形式写入指令&lt;/p&gt;

&lt;p&gt;-a 1000:0&lt;/p&gt;

&lt;p&gt;从起始地址依次输入指令&lt;/p&gt;

&lt;p&gt;-a&lt;/p&gt;

&lt;p&gt;从一个预设的地址开始输入指令&lt;/p&gt;

&lt;p&gt;a==5&lt;/p&gt;

&lt;p&gt;5==a&lt;/p&gt;

&lt;p&gt;编译时错误&lt;/p&gt;

&lt;p&gt;运行时错误&lt;/p&gt;

&lt;p&gt;函数式 sml&lt;/p&gt;

&lt;h1 id=&quot;第三章-寄存器内存访问&quot;&gt;第三章 寄存器（内存访问）&lt;/h1&gt;

&lt;h2 id=&quot;31-内存中字的存储&quot;&gt;3.1 内存中字的存储&lt;/h2&gt;

&lt;p&gt;CPU中，用16位寄存器来存储一个字。高8位存放高位字节，低8位存放低位字节。在内存中存储是，由于内存单元是字节单元，则一个字要用两个地址连续的内存单元来存放&lt;/p&gt;

&lt;p&gt;字单元，即存放一个字型数据（16位）的内存单元，由两个地址连续的内存单元组成&lt;/p&gt;

&lt;p&gt;我们将起始地址为N的字单元简称为N地址字单元&lt;/p&gt;

&lt;h2 id=&quot;32-ds和address&quot;&gt;3.2 DS和[address]&lt;/h2&gt;

&lt;p&gt;8086CPU通常有一个DS寄存器，通常用来存放要访问数据的段地址&lt;/p&gt;

&lt;p&gt;前面我们使用mov指令，可完成两种传送：1、将数据直接送入寄存器2、将一个寄存器中的内容送入另一个寄存&lt;/p&gt;

&lt;p&gt;器&lt;/p&gt;

&lt;p&gt;也可以使用mov指令将一个内存单元中的内容送入一个寄存器中&lt;/p&gt;

&lt;p&gt;mov 寄存器名，内存单元地址&lt;/p&gt;

&lt;p&gt;[…]表示一个内存单元，[…]中的0表示内存单元的偏移地址。我们知道，只有偏移地址是不能定位一个内存单元的，指令执行的时候，8086CPU会自动取ds中的数据为内存单元的段地址&lt;/p&gt;

&lt;p&gt;8086CPU不支持将数据直接送入段寄存器的操作，ds是一个段寄存器，所以mov ds,1000H这条指令是非法的。那么如何将1000H送入ds呢？只好用一个寄存器来进行中转，即先将1000H送入一个一般的寄存器，如bx，再将bx中的内容送入ds。这属于8086CPU硬件设计的问题&lt;/p&gt;

&lt;h2 id=&quot;33-字的传送&quot;&gt;3.3 字的传送&lt;/h2&gt;

&lt;p&gt;前面我们用mov指令在寄存器和内存之间进行字节型数据的传送。因为8086CPU是16位结构，有16根数据线，所以，可以一次性传送16位的数据，也就是说可以一次性传送一个字。只要在mov指令中给出16位的寄存器就可以进行16位数据的传送了&lt;/p&gt;

&lt;h2 id=&quot;34-movaddsub指令&quot;&gt;3.4 mov、add、sub指令&lt;/h2&gt;

&lt;p&gt;到现在，我们知道，mov指令可以有以下几种形式：&lt;/p&gt;

&lt;p&gt;mov 寄存器，数据                mov ax,8&lt;/p&gt;

&lt;p&gt;mov 寄存器，寄存器.           mov ax,bx&lt;/p&gt;

&lt;p&gt;mov 寄存器，内存单元        mov ax,[0]&lt;/p&gt;

&lt;p&gt;mov 内存单元，寄存器        mov [0],ax&lt;/p&gt;

&lt;p&gt;mov 段寄存器，寄存器        mov ds,ax&lt;/p&gt;

&lt;p&gt;推测：&lt;/p&gt;

&lt;p&gt;（1）8086CPU内部有寄存器到段寄存器的通路，那么也应该有相反的通路&lt;/p&gt;

&lt;p&gt;（2）既然可以从寄存器向内存单元传送数据，那么也应该有mov 内存单元，段寄存器，从段寄存器向内存单元传送数据&lt;/p&gt;

&lt;p&gt;（3）mov 段寄存器，内存单元也应该可行&lt;/p&gt;

&lt;p&gt;add sub&lt;/p&gt;

&lt;h2 id=&quot;35-数据段&quot;&gt;3.5 数据段&lt;/h2&gt;

&lt;p&gt;在编程时，根据需要，可以将一组内存单元定义为一个段&lt;/p&gt;

&lt;p&gt;专门存储数据的内存空间，可以定义一个数据段&lt;/p&gt;

&lt;p&gt;在具体操作时，用ds存放数据段的段地址，再根据需要，通过相关指令访问数据段中的具体单元&lt;/p&gt;

&lt;h2 id=&quot;36-栈&quot;&gt;3.6 栈&lt;/h2&gt;

&lt;p&gt;LIFO last in first out&lt;/p&gt;

&lt;h2 id=&quot;37-cpu提供的栈机制&quot;&gt;3.7 CPU提供的栈机制&lt;/h2&gt;

&lt;p&gt;现今的CPU中都有栈的机制，8086CPU也不例外。8086CPU提供相关的指令来以栈的方式访问内存空间。这意味着，在基于8086CPU编程的时候，可以将一段内存当作栈来使用&lt;/p&gt;

&lt;p&gt;PUSH POP&lt;/p&gt;

&lt;p&gt;8086CPU的入栈和出栈操作都是以字为单位进行的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-08 下午8.18.55.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;8086CPU中，有两个寄存器，段寄存器SS和寄存器SP，栈顶的段地址存放在SS中，偏移地址存放在SP中。任意时刻，SS:SP指向栈顶元素&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-08 下午8.22.49.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;8086CPU中，入栈时，栈顶从高地址向低地址方向增长&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-08 下午8.26.21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;38-栈顶超界的问题&quot;&gt;3.8 栈顶超界的问题&lt;/h2&gt;

&lt;p&gt;8086CPU不保证我们对栈的操作不会超界&lt;/p&gt;

&lt;p&gt;8086CPU的工作机理，他只考虑当前的情况：当前的栈顶在何处、当前要执行的指令是哪一条&lt;/p&gt;

&lt;p&gt;我们在编程的时候要自己操心栈顶超界的问题，要根据可能要用到的最大栈空间，来安排栈的大小，防止入栈的数据过多而导致的超界；执行出栈操作的时候也要注意，以防栈空的时候继续出栈而导致的超界&lt;/p&gt;

&lt;h2 id=&quot;39-pushpop指令&quot;&gt;3.9 push、pop指令&lt;/h2&gt;

&lt;p&gt;push 寄存器&lt;/p&gt;

&lt;p&gt;pop 寄存器&lt;/p&gt;

&lt;p&gt;push 段寄存器&lt;/p&gt;

&lt;p&gt;pop 段寄存器&lt;/p&gt;

&lt;p&gt;push 内存单元&lt;/p&gt;

&lt;p&gt;pop 内存单元&lt;/p&gt;

&lt;p&gt;指令执行时，CPU要知道内存单元的地址，可以在push、pop指令中只给出内存单元的偏移地址，段地址在指令执行时，CPU从ds中取得&lt;/p&gt;

&lt;p&gt;push、pop实质上就是一种内存传送指令，可以在寄存器和内存之间传送数据&lt;/p&gt;

&lt;p&gt;两步操作&lt;/p&gt;

&lt;h2 id=&quot;310-栈段&quot;&gt;3.10 栈段&lt;/h2&gt;

&lt;p&gt;栈段&lt;/p&gt;

&lt;p&gt;将一段内存当作栈段，仅仅是我们在编程时的一种安排，CPU并不会由于这种安排，就在执行push、pop等栈操作指令时自动的将我们定义的栈段当作栈空间来访问&lt;/p&gt;

&lt;h2 id=&quot;实验2-用机器指令和汇编指令编程&quot;&gt;实验2 用机器指令和汇编指令编程&lt;/h2&gt;

&lt;h3 id=&quot;预备知识debug的使用-1&quot;&gt;预备知识：Debug的使用&lt;/h3&gt;

&lt;h4 id=&quot;关于d命令&quot;&gt;关于D命令&lt;/h4&gt;

&lt;h1 id=&quot;第四章-第一个程序&quot;&gt;第四章 第一个程序&lt;/h1&gt;

&lt;h2 id=&quot;41-一个源程序从写出到执行的过程&quot;&gt;4.1 一个源程序从写出到执行的过程&lt;/h2&gt;

&lt;p&gt;第一步：编写汇编源程序&lt;/p&gt;

&lt;p&gt;第二步：对源程序进行编译连接&lt;/p&gt;

&lt;p&gt;使用汇编语言编译程序对源程序文件中的源程序进行编译，产生目标文件；再用连接程序对目标文件进行连接，生成可在操作系统中直接运行的可执行文件&lt;/p&gt;

&lt;p&gt;可执行文件包含两个部分：&lt;/p&gt;

&lt;p&gt;（1）程序（从源程序中的汇编指令翻译过来的机器码）和数据（源程序中定义的数据）&lt;/p&gt;

&lt;p&gt;（2）相关的描述信息（比如，程序有多大、要占用多少内存空间等）&lt;/p&gt;

&lt;p&gt;第三步：执行可执行文件中的程序&lt;/p&gt;

&lt;p&gt;操作系统依照可执行文件中的描述信息，将可执行文件中的机器码和数据加载入内存，并进行相关的初始化（比如设置CS:IP指向第一条要执行的指令），然后由CPU执行程序&lt;/p&gt;

&lt;h2 id=&quot;42-源程序&quot;&gt;4.2 源程序&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-12 下午9.30.21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1、伪指令&lt;/p&gt;

&lt;p&gt;在汇编语言源程序中，包含两种指令，一种是汇编指令，一种是伪指令。汇编指令有对应的机器码的指令，可以被编译为机器指令，最终为CPU所执行。而伪指令没有对应的机器指令，最终不被CPU所执行。伪指令是由编译器来执行的指令，编译器根据伪指令来进行相关的编译工作&lt;/p&gt;

&lt;p&gt;（1）XXX segment XXXends&lt;/p&gt;

&lt;p&gt;segment和ends是一对成对使用的伪指令，这是在写可被编译器编译的汇编程序时，必须要用到的一对伪指令。segment和ends的功能是定义一个段，segment说明一个段开始，ends说明一个段结束。一个段必须有一个名称来标识&lt;/p&gt;

&lt;p&gt;一个汇编程序是由多个段组成的，这些段被用来存放代码、数据或当作栈空间来使用。一个源程序中所有将被计算机所处理的信息：指令、数据、栈，被划分到了不同的段中&lt;/p&gt;

&lt;p&gt;一个有意义的汇编程序中至少要有一个段，这个段用来存放代码&lt;/p&gt;

&lt;p&gt;（2）end&lt;/p&gt;

&lt;p&gt;end是一个汇编程序的结束标记，编译器在编译汇编程序的过程中，如果碰到了伪指令end，就结束对源程序的编译。所以，在我们写程序的时候，如果程序写完了，要在结尾处加上伪指令end。否则，编译器在编译程序时，就无法知道程序在何处结束&lt;/p&gt;

&lt;p&gt;（3）assume&lt;/p&gt;

&lt;p&gt;这条伪指令的含义是假设。他假设某一段寄存器和程序中的某一个用segment…ends定义的段相关联。通过assume说明这种关联，在需要的情况下，编译程序可以将段寄存器和某一个具体的段相联系。assume并不是一条非要深入理解不可的伪指令&lt;/p&gt;

&lt;p&gt;2、源程序中的程序&lt;/p&gt;

&lt;p&gt;源程序中的汇编指令组成了最终由计算机执行的程序，而源程序中的伪指令是由编译器来处理的，他们并不实现我们编程的最终目的。这里所说的程序就是指源程序中最终由计算机执行、处理的指令或数据&lt;/p&gt;

&lt;p&gt;注意，以后可以将源程序文件中的所有内容称为源程序，将源程序中最终由计算机执行、处理的指令或数据，称为程序。程序最先以汇编指令的形式存在源程序中，经编译、连接后转变为机器码，存储在可执行文件中&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-12 下午10.40.31.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3、标号&lt;/p&gt;

&lt;p&gt;比如codesg。一个标号指代了一个地址。比如codesg在segment的前面，作为一个段的名称，这个段的名称最终将被编译、连接程序处理为一个段的段地址&lt;/p&gt;

&lt;p&gt;4、程序的结构&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-12 下午10.44.02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5、程序返回&lt;/p&gt;

&lt;p&gt;下面，我们在DOS(一个单任务操作系统)的基础上，简单的讨论一下程序运行的问题&lt;/p&gt;

&lt;p&gt;一个程序P2在可执行文件中，则必须有一个正在运行的程序P1，将P2从可执行文件中加载入内存后，将CPU的控制权交给P2，P2才能得以运行。P2开始运行后，P1暂停运行。而当P2运行完毕后，应该讲CPU的控制权交还给使他得以运行的程序P1，此后，P1继续运行&lt;/p&gt;

&lt;p&gt;一个程序结束后，将CPU的控制权交还给使他得以运行的程序，我们称这个过程为：程序返回&lt;/p&gt;

&lt;p&gt;在程序的末尾添加返回的程序段&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-12 下午10.50.05.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6、语法错误和逻辑错误&lt;/p&gt;

&lt;p&gt;程序在编译时被编译器发现的错误是语法错误&lt;/p&gt;

&lt;p&gt;在源程序编译后，在运行时发生的错误是逻辑错误&lt;/p&gt;

&lt;p&gt;语法错误容易发现和解决，而逻辑错误不容易被发现&lt;/p&gt;

&lt;h2 id=&quot;43-编辑源程序&quot;&gt;4.3 编辑源程序&lt;/h2&gt;

&lt;p&gt;可以用任意的文本编辑器来编辑源程序，只要最终将其存储为纯文本文件即可&lt;/p&gt;

&lt;p&gt;在我们的课程中，使用DOS下面的Edit&lt;/p&gt;

&lt;h2 id=&quot;44-编译&quot;&gt;4.4 编译&lt;/h2&gt;

&lt;p&gt;源程序文件 c:\1.asm&lt;/p&gt;

&lt;p&gt;对其进行编译，生成包含机器代码的目标文件&lt;/p&gt;

&lt;p&gt;在编译一个源程序之前首先要找到一个相应的编译器。在我们的课程中，采用微软的masm5.0汇编编译器，文件名为masm.exe&lt;/p&gt;

&lt;p&gt;（1）进入DOS方式，进入c:\masm目录，运行masm.exe&lt;/p&gt;

&lt;p&gt;默认的文件拓展名为asm，如果源程序文件不是asm，就要输入他的全名，比如P1.txt&lt;/p&gt;

&lt;p&gt;当前路径只用输入名字，其他目录需要输入路径&lt;/p&gt;

&lt;p&gt;（2）继续输入要编译出的目标文件的名称 1.obj&lt;/p&gt;

&lt;p&gt;（3）编译程序提示输入列表文件的名称，这个文件时编译器将源程序编译为目标文件的过程中产生的中间结果。可以让编译起不生成这个文件，直接按Enter&lt;/p&gt;

&lt;p&gt;（4）编译程序提示输入交叉引用文件的名称，同样是中间结果，可以不生成这个文件，按Enter&lt;/p&gt;

&lt;h2 id=&quot;45-连接&quot;&gt;4.5 连接&lt;/h2&gt;

&lt;p&gt;我们使用微软的Overlay Linker3.60连接器，文件名为link.exe&lt;/p&gt;

&lt;p&gt;（1）进入DOS方式，运行link.exe。默认的文件拓展名为obj，可如果文件名不是以obj为拓展名，则要输入他的全名，比如目标文件名为p1.bin&lt;/p&gt;

&lt;p&gt;（2）连接程序提示输入映像文件的名称。这个文件是连接程序将目标文件连接为可执行文件过程中产生的中间结果，可以让连接程序不生成这个文件&lt;/p&gt;

&lt;p&gt;（3）连接程序提示输入库文件的名称。库文件里面包含了一些可以调用的子程序，如果程序中调用了某一个库文件中的子程序，就需要在连接的时候，将这个库文件和目标文件连接到一起，生成可执行文件&lt;/p&gt;

&lt;p&gt;连接的作用我们并不想过多的讨论&lt;/p&gt;

&lt;p&gt;在汇编过程中，我们将会接触到许多知识、概念，对于这些，我们并不是都有深入讨论的必要&lt;/p&gt;

&lt;p&gt;我们学习汇编的主要目的，就是要通过汇编语言进行编程而深入的理解计算机底层的基本工作机理，达到可以随心所欲地控制计算机的目的。基于这种考虑，我们的编程活动，大都是直接对硬件进行的。我们希望直接对硬件编程，却并不希望用机器码编程。我们用汇编语言编程，就要用到编辑器Edit、编译器masm、连接器link、调试工具Debug等所有工具，而这些工具都是在操作系统之上运行的程序，所以我们的学习过程必须在操作系统的环境中进行。我们在一个操作系统环境下，使用了许多工具，这势必要牵扯到操作系统、编译原理等方面的知识和原理。我们只是利用这些环境、工具来方便我们的学习，而不希望这些东西分散了我们的注意力。所以，对于涉及而又不在我们学习的主要内容之中的东西，我们只做简单的解释&lt;/p&gt;

&lt;p&gt;连接的作用有以下几个&lt;/p&gt;

&lt;p&gt;(1) 当源程序很大时,可以将它分为多个源程序文件来编译,每个源程序编译成为目
标文件后,再用连接程序将它们连接到一起,生成一个可执行文件&lt;/p&gt;

&lt;p&gt;(2) 程序中调用了某个库文件中的子程序,需要将这个库文件和该程序生成的目标文
件连接到一起,生成一个可执行文件&lt;/p&gt;

&lt;p&gt;(3) 一个源程序编译后,得到了存有机器码的目标文件,目标文件中的有些内容还不
能直接用来生成可执行文件,连接程序将这些内容处理为最终的可执行信息。所以，在只有一个源程序文件,而又不需要调用某个库中的子程序的情况下,也必须用连接程序对目标文件进行处理,生成可执行文件&lt;/p&gt;

&lt;h2 id=&quot;46-以简化的方式进行编译和连接&quot;&gt;4.6 以简化的方式进行编译和连接&lt;/h2&gt;

&lt;p&gt;编译、连接的最终目的使用源程序文件生成可执行文件。在这个过程中所产生的中间文件都可以忽略。我们可以用一种较为简捷的方式进行编译、连接。&lt;/p&gt;

&lt;h2 id=&quot;47-1exe的执行&quot;&gt;4.7 1.exe的执行&lt;/h2&gt;

&lt;p&gt;C:\masm&amp;gt;1&lt;/p&gt;

&lt;h2 id=&quot;48-谁将可执行文件中的程序装载进入内存并使他运行&quot;&gt;4.8 谁将可执行文件中的程序装载进入内存并使他运行？&lt;/h2&gt;

&lt;h3 id=&quot;操作系统的外壳&quot;&gt;操作系统的外壳&lt;/h3&gt;

&lt;p&gt;操作系统是由多个功能模块组成的庞大、复杂的软件系统。任何通用的操作系统，都要提供一个称为shell(外壳)的程序，用户(操作人员)使用这个程序来操作计算机系统进行工作&lt;/p&gt;

&lt;p&gt;DOS中有一个程序command.com，这个程序在DOS中称为命令解释器，也就是DOS系统的shell&lt;/p&gt;

&lt;p&gt;DOS启动时，先完成其他重要的初始化工作，然后运行command.com，command.com运行后，执行完其他的相关任务，在屏幕上显示出由当前盘符和当前路径组成的提示符，然后等待用户的输入&lt;/p&gt;

&lt;p&gt;用户可以输入所要执行的命令，这些命令由command执行，command执行完这些命令后，再次显示由当前盘符和当前路径组成的提示符，等待用户的输入&lt;/p&gt;

&lt;p&gt;如果用户要执行一个程序，则输入该程序的可执行文件的名称，command首先根据文件名找到可执行文件，然后将这个可执行文件中的程序加载入内存，设置CS:IP指向程序的入口。此后，command暂停运行，CPU运行程序。程序运行结束后，返回到command中，command再次显示由当前盘符和当前路径组成的提示符，等待用户的输入&lt;/p&gt;

&lt;p&gt;在DOS中，command处理各种输入：命令或要执行的程序的文件名。我们就是通过command来进行工作的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-13 下午1.06.09.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;49-程序执行过程的跟踪&quot;&gt;4.9 程序执行过程的跟踪&lt;/h2&gt;

&lt;p&gt;可以用Debug来跟踪一个程序的运行过程&lt;/p&gt;

&lt;p&gt;Debug可以将程序加载入内存，设置CS:IP指向程序的入口，但Debug并不放弃对CPU的控制，这样，我们就可以使用Debug的相关命令来单步执行程序，查看每一条指令的执行结果&lt;/p&gt;

&lt;p&gt;debug 1.exe&lt;/p&gt;

&lt;p&gt;Debug将程序从可执行文件加载入内存后，cx中存放的是程序的长度&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-13 下午1.10.46.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-13 下午1.13.00.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;用T命令单步执行程序中的每一条指令，并观察每条指令的执行结果，到了int 21，我们要用P命令执行&lt;/p&gt;

&lt;p&gt;int 21执行后，显示出Program terminated normally，返回到Debug中，表示程序正常结束&lt;/p&gt;

&lt;p&gt;使用Q命令退出Debug，将返回到command中&lt;/p&gt;

&lt;p&gt;command加载Debug，Debug加载1.exe，从1.exe中的程序返回到Debug，从Debug返回到command&lt;/p&gt;

&lt;h1 id=&quot;第五章-bx和loop指令&quot;&gt;第五章 [BX]和loop指令&lt;/h1&gt;

&lt;p&gt;1、[bx]和内存单元的描述&lt;/p&gt;

&lt;p&gt;要完整描述一个内存单元，需要两种信息：内存单元的地址和内存单元的长度（类型）&lt;/p&gt;

&lt;p&gt;单元的长度（类型）可以由具体指令中的其他操作对象（比如说寄存器）指出&lt;/p&gt;

&lt;p&gt;mov ax, [bx]&lt;/p&gt;

&lt;p&gt;将一个内存单元的内容送入ax，这个内存单元的长度为2字节（字单元），存放一个字，偏移地址在bx中，段地址在ds中&lt;/p&gt;

&lt;p&gt;2、loop&lt;/p&gt;

&lt;p&gt;循环&lt;/p&gt;

&lt;p&gt;3、我们定义的描述性的符号：”()”&lt;/p&gt;

&lt;p&gt;为了描述上的简洁，在以后的课程中，我们将使用一个描述性的符号来表示一个寄存器或一个内存单元中的内容&lt;/p&gt;

&lt;p&gt;()中的元素可以有3种类型：寄存器名 段寄存器名 内存单元的物理地址（一个20位数据）&lt;/p&gt;

&lt;p&gt;（X）所表示的数据有两种类型：字节、字。是哪种类型是由寄存器名或具体的运算决定，比如：&lt;/p&gt;

&lt;p&gt;(al)、(bl)、(cl)等得到的数据为字节型&lt;/p&gt;

&lt;p&gt;(ds)、(ax)、(bx)等得到的数据为字型&lt;/p&gt;

&lt;p&gt;4、约定符号idata表示常量&lt;/p&gt;

&lt;h2 id=&quot;51-bx&quot;&gt;5.1 [BX]&lt;/h2&gt;

&lt;p&gt;mov ax, [bx]&lt;/p&gt;

&lt;p&gt;bx中存放的数据作为一个偏移地址EA，段地址SA默认的在ds中，将SA:EA处的数据送入ax中&lt;/p&gt;

&lt;p&gt;bx中存放的数据作为一个偏移地址EA，段地址SA默认的在ds中，将ax处的数据送入SA:EA中&lt;/p&gt;

&lt;p&gt;inc bx 的含义是bx中的内容加1&lt;/p&gt;

&lt;h2 id=&quot;52-loop指令&quot;&gt;5.2 Loop指令&lt;/h2&gt;

&lt;p&gt;loop指令的格式是：loop标号，CPU执行loop指令的时候，要进行两步操作&lt;/p&gt;

&lt;p&gt;1、(cx)=(cx-1)&lt;/p&gt;

&lt;p&gt;2、判断cx中的值，不为零则转至标号处执行程序，如果为零则向下执行&lt;/p&gt;

&lt;p&gt;通常我们用loop指令来实现循环功能，cx中存放循环次数&lt;/p&gt;

&lt;p&gt;assume cs:code&lt;/p&gt;

&lt;p&gt;code segment&lt;/p&gt;

&lt;p&gt;​		mov ax, 2&lt;/p&gt;

&lt;p&gt;​		mov cx, 11&lt;/p&gt;

&lt;p&gt;s:	 add ax, ax&lt;/p&gt;

&lt;p&gt;​		loop s&lt;/p&gt;

&lt;p&gt;​		mov ax, 4c00h&lt;/p&gt;

&lt;p&gt;​		int 21h&lt;/p&gt;

&lt;p&gt;code ends&lt;/p&gt;

&lt;p&gt;end&lt;/p&gt;

&lt;p&gt;（1）标号&lt;/p&gt;

&lt;p&gt;在汇编语言中，标号代表一个地址，程序中有一个标号s。它实际上标识了一个地址，这个地址处有一条指令：add ax, ax&lt;/p&gt;

&lt;p&gt;（2）loop s&lt;/p&gt;

&lt;p&gt;CPU执行loop s的时候，要进行两步操作&lt;/p&gt;

&lt;p&gt;cx和loop指令相配合实现循环功能的3个要点&lt;/p&gt;

&lt;p&gt;（1）在cx中存放循环次数&lt;/p&gt;

&lt;p&gt;（2）loop指令中的标号所标识地址要在前面&lt;/p&gt;

&lt;p&gt;（3）要循环执行的程序段，要写在标号和loop指令的中间&lt;/p&gt;

&lt;h2 id=&quot;53-在debug中跟踪用loop指令实现的循环程序&quot;&gt;5.3 在Debug中跟踪用loop指令实现的循环程序&lt;/h2&gt;

&lt;p&gt;大于9FFFh的十六进制数据A000H，在书写的时候都是以字母开头的。而在汇编源程序中，数据不能以字母开头，所以要再前面加0。比如，A000h在汇编源程序中要写为0A000h&lt;/p&gt;

&lt;p&gt;用Debug加载p3.exe后，用r命令查看寄存器中的内容&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Sep 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/09/17/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E7%AC%AC%E4%B8%80%E5%88%B0%E4%BA%94%E7%AB%A0/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/09/17/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E7%AC%AC%E4%B8%80%E5%88%B0%E4%BA%94%E7%AB%A0/</guid>
        
        <category>汇编</category>
        
        <category>学习笔记</category>
        
        
      </item>
    
      <item>
        <title>Threading Programming Guide（2）</title>
        <description>&lt;h1 id=&quot;threading-programmer-guide2&quot;&gt;Threading Programmer Guide（2）&lt;/h1&gt;

&lt;h2 id=&quot;线程管理&quot;&gt;线程管理&lt;/h2&gt;

&lt;p&gt;OS X或iOS中的每个进程（应用程序）由一个或多个线程组成，每个线程代表通过应用程序代码执行的单个路径。每个应用程序都从一个线程开始，该线程运行该应用程序的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;功能。应用程序可以产生其他线程，每个线程都执行特定功能的代码。&lt;/p&gt;

&lt;p&gt;当应用程序产生新线程时，该线程将成为应用程序进程空间内的一个独立实体。每个线程都有其自己的执行堆栈，并由内核分别计划在运行时运行。线程可以与其他线程和其他进程通信，执行I / O操作以及执行您可能需要执行的其他任何操作。但是，由于它们位于同一进程空间内，因此单个应用程序中的所有线程共享同一虚拟内存空间，并且与进程本身具有相同的访问权限。&lt;/p&gt;

&lt;h3 id=&quot;线程成本&quot;&gt;线程成本&lt;/h3&gt;

&lt;p&gt;就内存使用和性能而言，线程化对您的程序（和系统）造成了实际损失。每个线程都需要在内核内存空间和程序的内存空间中分配内存。使用有线内存将管理线程和协调其调度所需的核心结构存储在内核中。线程的堆栈空间和每个线程的数据存储在程序的内存空间中。这些结构中的大多数是在您首次创建线程时创建和初始化的，由于与内核之间的交互作用，该过程可能相对昂贵。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-10 下午2.01.41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 由于具有底层内核支持，因此操作对象通常可以更快地创建线程。他们不是每次都从头开始创建线程，而是使用已经驻留在内核中的线程池来节省分配时间。&lt;/p&gt;

&lt;p&gt;编写线程代码时要考虑的另一个成本是生产成本。设计线程化的应用程序有时可能需要对组织应用程序的数据结构的方式进行根本性的更改。为避免使用同步，可能需要进行这些更改，否则同步本身可能对设计不良的应用程序造成巨大的性能损失。设计这些数据结构以及调试线程代码中的问题可能会增加开发线程应用程序所需的时间。但是，如果线程花费太多时间等待锁或不执行任何操作，则避免这些开销会在运行时产生更大的问题。&lt;/p&gt;

&lt;h3 id=&quot;创建一个线程&quot;&gt;创建一个线程&lt;/h3&gt;

&lt;p&gt;创建低级线程相对简单。在所有情况下，您都必须具有一个函数或方法作为线程的主要入口点，并且必须使用可用的线程例程之一来启动线程。以下各节显示了更常用的线程技术的基本创建过程。使用这些技术创建的线程将继承一组默认属性，这些属性由您使用的技术确定。&lt;/p&gt;

&lt;h4 id=&quot;使用nsthread&quot;&gt;使用NSThread&lt;/h4&gt;

&lt;h4 id=&quot;使用posi线程&quot;&gt;使用POSI线程&lt;/h4&gt;

&lt;h4 id=&quot;使用nsobject生成线程&quot;&gt;使用NSObject生成线程&lt;/h4&gt;

&lt;h4 id=&quot;在cocoa应用程序中使用posix线程&quot;&gt;在Cocoa应用程序中使用POSIX线程&lt;/h4&gt;

&lt;h5 id=&quot;保护可可框架&quot;&gt;保护可可框架&lt;/h5&gt;

&lt;h5 id=&quot;混合posix和可可锁&quot;&gt;混合POSIX和可可锁&lt;/h5&gt;

&lt;h3 id=&quot;配置线程属性&quot;&gt;配置线程属性&lt;/h3&gt;

&lt;p&gt;在创建线程之后，有时甚至在创建线程之前，您可能需要配置线程环境的不同部分&lt;/p&gt;

&lt;h4 id=&quot;配置线程的堆栈大小&quot;&gt;配置线程的堆栈大小&lt;/h4&gt;

&lt;h4 id=&quot;配置线程本地存储&quot;&gt;配置线程本地存储&lt;/h4&gt;

&lt;h4 id=&quot;设置线程的分离状态&quot;&gt;设置线程的分离状态&lt;/h4&gt;

&lt;h4 id=&quot;设置线程的优先级&quot;&gt;设置线程的优先级&lt;/h4&gt;

&lt;h3 id=&quot;编写线程输入例程&quot;&gt;编写线程输入例程&lt;/h3&gt;

&lt;h4 id=&quot;创建一个自动释放池&quot;&gt;创建一个自动释放池&lt;/h4&gt;

&lt;h4 id=&quot;设置异常处理程序&quot;&gt;设置异常处理程序&lt;/h4&gt;

&lt;h4 id=&quot;设置运行循环&quot;&gt;设置运行循环&lt;/h4&gt;

&lt;h3 id=&quot;终止线程&quot;&gt;终止线程&lt;/h3&gt;
</description>
        <pubDate>Wed, 16 Sep 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/09/16/Thread-Management/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/09/16/Thread-Management/</guid>
        
        <category>iOS</category>
        
        <category>学习笔记</category>
        
        
      </item>
    
      <item>
        <title>Threading Programming Guide（1）</title>
        <description>&lt;h1 id=&quot;threading-programming-guide1&quot;&gt;Threading Programming Guide（1）&lt;/h1&gt;

&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;

&lt;p&gt;线程是使在单个应用程序内同时执行多个代码路径成为可能的几种技术之一。尽管诸如操作对象和Grand Central Dispatch（GCD）等较新的技术为实现并发提供了更现代，更高效的基础架构，但是OS X和iOS还提供了用于创建和管理线程的接口。&lt;/p&gt;

&lt;h2 id=&quot;关于线程编程&quot;&gt;关于线程编程&lt;/h2&gt;

&lt;p&gt;多年来，最大的计算机性能在很大程度上受到位于计算机中心的单个微处理器速度的限制。但是，随着单个处理器的速度开始达到其实际极限，芯片制造商转向了多核设计，从而使计算机有机会同时执行多项任务。而且，尽管OS X只要能够执行与系统有关的任务就可以利用这些内核，但是您自己的应用程序也可以通过线程利用它们。&lt;/p&gt;

&lt;h3 id=&quot;什么是线程&quot;&gt;什么是线程？&lt;/h3&gt;

&lt;p&gt;线程是在应用程序内部实现多个执行路径的相对轻量的方法。在系统级别，程序并排运行，系统根据每个程序的需求和其他程序的需求分配执行时间。但是，每个程序中都存在一个或多个执行线程，这些线程可用于同时或以几乎同时的方式执行不同的任务。系统本身实际上管理着这些执行线程，调度它们在可用内核上运行，并根据需要抢先中断它们以允许其他线程运行。&lt;/p&gt;

&lt;p&gt;从技术角度来看，线程是管理代码执行所需的内核级和应用程序级数据结构的组合。内核级结构在一个可用内核上协调事件向线程的调度和线程的抢占式调度。应用程序级结构包括用于存储函数调用的调用堆栈，以及应用程序管理和操纵线程的属性和状态所需的结构。&lt;/p&gt;

&lt;p&gt;在非并行应用程序中，只有一个执行线程。该线程以应用程序的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;例程开始和结束，并且一个一个地分支到不同的方法或函数，以实现应用程序的整体行为。相比之下，支持并发的应用程序从一个线程开始，并根据需要添加更多线程以创建其他执行路径。每个新路径都有其自己的自定义启动例程，该例程独立于应用程序&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;例程中的代码运行。应用程序中具有多个线程可提供两个非常重要的潜在优势：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;多个线程可以提高应用程序的感知响应能力。&lt;/li&gt;
  &lt;li&gt;多线程可以提高应用程序在多核系统上的实时性能。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果您的应用程序只有一个线程，则该线程必须执行所有操作。它必须响应事件，更新应用程序的窗口并执行实现应用程序行为所需的所有计算。仅具有一个线程的问题在于，它一次只能执行一件事。那么，当您的计算之一需要很长时间才能完成时，会发生什么？当您的代码忙于计算所需的值时，您的应用程序将停止响应用户事件并更新其窗口。如果此行为持续足够长的时间，则用户可能会认为您的应用程序已挂起，并试图强行退出它。但是，如果将自定义计算移动到单独的线程上，则应用程序的主线程将可以自由地更及时地响应用户交互。&lt;/p&gt;

&lt;p&gt;对于当今常见的多核计算机，线程提供了一种提高某些类型的应用程序性能的方法。执行不同任务的线程可以在不同处理器核心上同时执行操作，从而使应用程序可以在给定的时间内增加其工作量。&lt;/p&gt;

&lt;p&gt;当然，线程不是解决应用程序性能问题的灵丹妙药。除了线程提供的好处外，还有潜在的问题。在应用程序中具有多个执行路径会给您的代码增加相当多的复杂性。每个线程必须与其他线程协调其操作，以防止其破坏应用程序的状态信息。由于单个应用程序中的线程共享相同的内存空间，因此它们可以访问所有相同的数据结构。如果两个线程试图同时操作相同的数据结构，则一个线程可能会以破坏结果数据结构的方式覆盖另一个线程的更改。即使有适当的保护措施，您仍然必须提防编译器优化，这些优化会在代码中引入细微（而不是细微）的错误。&lt;/p&gt;

&lt;h3 id=&quot;线程术语&quot;&gt;线程术语&lt;/h3&gt;

&lt;p&gt;线程：用于指代代码的独立执行路径&lt;/p&gt;

&lt;p&gt;进程：用于指代一个正在运行的可执行文件，它可以包含多个线程&lt;/p&gt;

&lt;p&gt;任务：用于指代需要执行的工作的抽象概念&lt;/p&gt;

&lt;h3 id=&quot;线程替代&quot;&gt;线程替代&lt;/h3&gt;

&lt;p&gt;自己创建线程的一个问题是它们增加了代码的不确定性。线程是在应用程序中支持并发的相对较低级别和复杂方式。如果您不完全了解设计选择的含义，则很容易会遇到同步或时序问题，其严重性可能从细微的行为更改到应用程序崩溃和用户数据损坏。&lt;/p&gt;

&lt;p&gt;要考虑的另一个因素是根本是否需要线程或并发。线程解决了如何在同一进程内同时执行多个代码路径的特定问题。但是，在某些情况下，您所做的工作量不能保证并发。线程在内存消耗和CPU时间方面都会给您的进程带来大量开销。您可能会发现此开销对于预期的任务而言太大，或者其他选项更易于实现。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-10 下午12.02.04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;线程支持&quot;&gt;线程支持&lt;/h3&gt;

&lt;p&gt;如果您已有使用线程的代码，则OS X和iOS提供了几种在应用程序中创建线程的技术。此外，两个系统还提供了对管理和同步在这些线程上需要完成的工作的支持。&lt;/p&gt;

&lt;h4 id=&quot;线程包&quot;&gt;线程包&lt;/h4&gt;

&lt;p&gt;尽管线程的底层实现机制是Mach线程，但你很少(如果有的话)在Mach级别上使用线程。相反，您通常使用更方便的POSIX API或它的一个衍生物。Mach实现提供了所有线程的基本特性，但是，包括优先执行模型和调度线程的能力，使它们彼此独立。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-10 下午12.11.56.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在应用程序级别，所有线程的行为基本上与其他平台上的行为相同。启动线程后，线程以三种主要状态之一运行：运行，就绪或阻塞。如果线程当前未在运行，则要么阻塞并等待输入，要么准备运行，但尚未安排这样做。线程继续在这些状态之间来回移动，直到最终退出并移动到终止状态。&lt;/p&gt;

&lt;p&gt;创建新线程时，必须为该线程指定入口点函数（对于Cocoa线程，则为入口点方法）。该入口点函数构成您要在线程上运行的代码。当函数返回时，或显式终止线程时，线程将永久停止并被系统回收。由于就内存和时间而言，创建线程的成本相对较高，因此建议您的入口点函数执行大量工作或设置运行循环以允许执行重复工作。&lt;/p&gt;

&lt;h4 id=&quot;run-loops&quot;&gt;Run Loops&lt;/h4&gt;

&lt;p&gt;运行循环是用于管理异步到达线程的事件的基础架构。运行循环通过监视线程的一个或多个事件源来工作。当事件到达时，系统将唤醒线程并将事件分配给运行循环，然后运行循环将其分配给您指定的处理程序。如果不存在任何事件并准备处理事件，则运行循环会将线程置于睡眠状态。&lt;/p&gt;

&lt;p&gt;您不需要对创建的任何线程使用运行循环，但是这样做可以为用户提供更好的体验。运行循环可以创建使用最少资源的长寿命线程。由于运行循环在无事可做时将其线程置于睡眠状态，因此消除了轮询的需要，这浪费了CPU周期，并阻止了处理器本身休眠并节省功耗。&lt;/p&gt;

&lt;p&gt;要配置运行循环，您所要做的就是启动线程，获取对运行循环对象的引用，安装事件处理程序，并告诉运行循环运行。OS X提供的基础结构会自动为您处理主线程运行循环的配置。但是，如果计划创建寿命长的辅助线程，则必须自己为这些线程配置运行循环。&lt;/p&gt;

&lt;h4 id=&quot;同步工具&quot;&gt;同步工具&lt;/h4&gt;

&lt;p&gt;线程编程的危害之一是多个线程之间的资源争用。如果多个线程尝试同时使用或修改同一资源，则可能会出现问题。缓解此问题的一种方法是完全消除共享资源，并确保每个线程都有其自己独特的资源集来进行操作。但是，当不能完全维护单独的资源时，您可能必须使用锁，条件，原子操作和其他技术来同步对资源的访问。&lt;/p&gt;

&lt;p&gt;锁为一次只能由一个线程执行的代码提供了暴力保护形式。锁的最常见类型是互斥锁，也称为&lt;em&gt;互斥锁&lt;/em&gt;。当一个线程尝试获取当前由另一个线程持有的互斥锁时，它将阻塞，直到另一个线程释放该锁为止。尽管它们都基于相同的基础技术，但有几个系统框架提供对互斥锁的支持。此外，Cocoa提供了互斥锁的多种变体，以支持不同类型的行为，例如递归。有关可用锁类型的更多信息，请参见&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html#//apple_ref/doc/uid/10000057i-CH8-126320&quot;&gt;锁&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;除锁定外，系统还提供条件支持，以确保在应用程序中正确排序任务。条件充当关守，阻塞给定线程，直到它表示的条件变为真为止。发生这种情况时，条件将释放线程并允许其继续。POSIX层和Foundation框架都直接提供条件支持。（如果使用操作对象，则可以配置操作对象之间的依赖关系以对任务的执行进行排序，这与条件提供的行为非常相似。）&lt;/p&gt;

&lt;p&gt;尽管锁和条件在并发设计中非常常见，但是原子操作是保护和同步对数据的访问的另一种方法。在可以对标量数据类型执行数学或逻辑运算的情况下，原子运算提供了一种轻巧的替代锁的方法。原子操作使用特殊的硬件指令来确保在其他线程有机会访问变量之前完成对变量的修改。&lt;/p&gt;

&lt;h4 id=&quot;线程间通讯&quot;&gt;线程间通讯&lt;/h4&gt;

&lt;p&gt;尽管良好的设计可以最大程度地减少所需的通信量，但在某些时候，线程之间的通信还是很有必要的。（线程的工作是为您的应用程序工作，但是如果从未使用该工作的结果，那有什么用呢？）线程可能需要处理新的工作请求或将其进度报告给应用程序的主线程。在这些情况下，您需要一种从一个线程到另一个线程获取信息的方法。幸运的是，线程共享相同的进程空间这一事实意味着您有很多通信选项。&lt;/p&gt;

&lt;p&gt;线程之间有许多通信方式，每种都有其自身的优点和缺点。配置线程本地存储列出了可以在OS X中使用的最常见的通信机制。（除了消息队列和Cocoa分布式对象，这些技术在iOS中也可用。）按递增顺序列出了下表中的技术复杂。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-10 下午12.20.56.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;设计技巧&quot;&gt;设计技巧&lt;/h3&gt;

&lt;h4 id=&quot;避免明确创建线程&quot;&gt;避免明确创建线程&lt;/h4&gt;

&lt;p&gt;手动编写线程创建代码很繁琐，并且可能容易出错，因此应尽可能避免这样做。OS X和iOS通过其他API为并发提供隐式支持。与其自己创建一个线程，不如考虑使用异步API，GCD或操作对象来完成工作。这些技术可以在后台为您完成与线程相关的工作，并且可以保证正确进行。此外，GCD和操作对象等技术旨在根据当前系统负载调整活动线程的数量，从而比您自己的代码更有效地管理线程。&lt;/p&gt;

&lt;h4 id=&quot;保持线程合理忙碌&quot;&gt;保持线程合理忙碌&lt;/h4&gt;

&lt;p&gt;如果决定手动创建和管理线程，请记住线程会消耗宝贵的系统资源。您应该尽力确保分配给线程的所有任务都可以长期有效地工作。同时，您不必担心终止花费大部分空闲时间的线程。线程占用的内存非常少，其中一些已连接，因此释放空闲线程不仅有助于减少应用程序的内存占用，还可以释放更多的物理内存供其他系统进程使用。&lt;/p&gt;

&lt;h4 id=&quot;避免共享数据结构&quot;&gt;避免共享数据结构&lt;/h4&gt;

&lt;p&gt;当您最小化线程之间的通信和资源争用时，并行代码最有效。&lt;/p&gt;

&lt;p&gt;创建多线程应用程序很困难。即使您非常谨慎并在代码的所有适当位置锁定共享数据结构，您的代码在语义上仍可能是不安全的。例如，如果您的代码希望共享数据结构按特定顺序进行修改，则可能会遇到问题。将代码更改为基于事务的模型以进行补偿可能会随后抵消具有多个线程的性能优势。首先，消除资源争用通常会导致设计简单，性能出色。&lt;/p&gt;

&lt;h4 id=&quot;线程和用户界面&quot;&gt;线程和用户界面&lt;/h4&gt;

&lt;p&gt;如果您的应用程序具有图形用户界面，建议您接收与用户相关的事件，并从应用程序的主线程启动界面更新。这种方法有助于避免与处理用户事件和绘制窗口内容相关的同步问题。某些框架（例如Cocoa）通常需要此行为，但是即使对于那些不需要的框架，在主线程上保留此行为也具有简化用于管理用户界面的逻辑的优势。&lt;/p&gt;

&lt;p&gt;有一些值得注意的例外，从其他线程执行图形操作是有利的。例如，您可以使用辅助线程来创建和处理图像以及执行其他与图像有关的计算。对这些操作使用辅助线程可以大大提高性能。但是，如果不确定某个特定的图形操作，请计划从主线程执行该操作。&lt;/p&gt;

&lt;h4 id=&quot;注意退出时的线程行为&quot;&gt;注意退出时的线程行为&lt;/h4&gt;

&lt;p&gt;进程一直运行到所有非分离线程都退出为止。默认情况下，仅将应用程序的主线程创建为非分离主线程，但是您也可以以这种方式创建其他线程。当用户退出应用程序时，通常认为立即终止所有分离的线程是适当的行为，因为分离的线程完成的工作被认为是可选的。但是，如果您的应用程序正在使用后台线程将数据保存到磁盘或执行其他关键工作，则可能需要将这些线程创建为非分离线程，以防止在应用程序退出时丢失数据。&lt;/p&gt;

&lt;p&gt;将线程创建为非分离线程（也称为可连接线程）需要您做额外的工作。因为默认情况下大多数高级线程技术都不创建可连接线程，所以您可能必须使用POSIX API创建线程。另外，您必须向应用程序的主线程添加代码，以便在非分离线程最终退出时与它们分离。&lt;/p&gt;

&lt;p&gt;如果您正在编写Cocoa应用程序，则还可以使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;applicationShouldTerminate:&lt;/code&gt;委托方法将应用程序的终止延迟到以后或完全取消。延迟终止时，您的应用程序将需要等到所有关键线程完成其任务，然后再调用该&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replyToApplicationShouldTerminate:&lt;/code&gt;方法。&lt;/p&gt;

&lt;h4 id=&quot;处理异常&quot;&gt;处理异常&lt;/h4&gt;

&lt;p&gt;引发异常时，异常处理机制依赖于当前的调用堆栈来执行任何必要的清除。因为每个线程都有自己的调用堆栈，所以每个线程负责捕获自己的异常。在辅助线程中未能捕获到异常与在主线程中未能捕获到异常相同：拥有过程终止。您不能将未捕获的异常抛出到另一个线程进行处理。&lt;/p&gt;

&lt;p&gt;如果您需要在当前线程中将异常情况通知另一个线程（例如主线程），则应捕获该异常，并仅向该另一个线程发送一条消息，指出发生了什么。根据您的模型和您要执行的操作，捕获到异常的线程可以继续处理（如果可能的话），等待指令或只是退出。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 在可可中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSException&lt;/code&gt;对象是一个独立的对象，一旦被捕获，即可在线程之间传递。&lt;/p&gt;

&lt;p&gt;在某些情况下，可能会自动为您创建一个异常处理程序。例如，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@synchronized&lt;/code&gt;Objective-C中的指令包含一个隐式异常处理程序。&lt;/p&gt;

&lt;h4 id=&quot;干净的终止线程&quot;&gt;干净的终止线程&lt;/h4&gt;

&lt;p&gt;退出线程的最佳方法自然是让线程到达其主入口点例程的末尾。尽管有立即终止线程的功能，但这些功能仅应作为最后的手段使用。在线程到达其自然终点之前终止该线程可防止线程在其自身清除之后清理。如果线程已分配内存，打开文件或获取其他类型的资源，则您的代码可能无法回收这些资源，从而导致内存泄漏或其他潜在问题。&lt;/p&gt;

&lt;h4 id=&quot;库中的线程安全&quot;&gt;库中的线程安全&lt;/h4&gt;

&lt;p&gt;尽管应用程序开发人员可以控制应用程序是否使用多个线程执行，但是库开发人员却不能。开发库时，必须假定调用应用程序是多线程的，或者可以随时切换为多线程。因此，您应该始终对代码的关键部分使用锁。&lt;/p&gt;

&lt;p&gt;对于库开发人员，仅当应用程序变为多线程时才创建锁是不明智的。如果需要在某个时候锁定代码，请在使用库时尽早创建锁定对象，最好是通过某种显式调用来初始化库。尽管您还可以使用静态库初始化函数来创建此类锁，但是仅在没有其他方法时才尝试这样做。执行初始化函数会增加加载库所需的时间，并且可能会对性能产生不利影响。&lt;/p&gt;

&lt;p&gt;始终记住平衡调用以锁定和解锁库中的互斥锁。您还应该记住锁定库数据结构，而不是依靠调用代码来提供线程安全的环境。&lt;/p&gt;

&lt;p&gt;如果要开发Cocoa库，可以在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSWillBecomeMultiThreadedNotification&lt;/code&gt;想要成为应用程序多线程时收到通知的情况下，注册为的观察者。但是，您不应依赖于接收此通知，因为它可能在调用库代码之前就已分派。&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Sep 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/09/16/About-Threaded-Programming/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/09/16/About-Threaded-Programming/</guid>
        
        <category>iOS</category>
        
        <category>学习笔记</category>
        
        
      </item>
    
      <item>
        <title>Swift tutorial</title>
        <description>&lt;h1 id=&quot;swift&quot;&gt;Swift&lt;/h1&gt;

&lt;h2 id=&quot;swift闭包&quot;&gt;Swift闭包&lt;/h2&gt;

&lt;p&gt;闭包是自包含的功能代码块，可以在代码中使用或者用来作为参数传值&lt;/p&gt;

&lt;p&gt;闭包的形式：&lt;/p&gt;

&lt;p&gt;1、全局函数：有名字但不能捕获任何的值&lt;/p&gt;

&lt;p&gt;2、嵌套函数：有名字，也能捕获封闭函数内的值&lt;/p&gt;

&lt;p&gt;3、闭包表达式：无名闭包，使用轻量级语法，可以根据上下文环境捕获值&lt;/p&gt;

&lt;p&gt;Swift的几点优化：&lt;/p&gt;

&lt;p&gt;1、根据上下文推断参数和返回值类型&lt;/p&gt;

&lt;p&gt;2、从单行表达式闭包中隐式返回&lt;/p&gt;

&lt;p&gt;3、可以使用简化参数名，如$0，$1&lt;/p&gt;

&lt;p&gt;4、提供了尾随闭包语法&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;statements&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Swift的String类型定义了关于&amp;gt;的字符串实现，其作为一个函数接受两个String类型的参数并返回Bool类型的值。而这正好与sort(_:)方法的第二个参数需要的函数类型相符合&lt;/p&gt;

&lt;h3 id=&quot;尾随闭包&quot;&gt;尾随闭包&lt;/h3&gt;

&lt;p&gt;尾随闭包是一个书写在函数括号之后的闭包表达式，函数支持将其作为最后一个参数调用&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;someFunctionThatTakesAClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//函数部分&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;someFunctionThatTakesAClouse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//闭包主体部分&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;someFuncionThatTakesAClouse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//闭包主体部分&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果函数只需要闭包表达式一个参数，当您使用尾随闭包时，您甚至可以把()省略掉&lt;/p&gt;

&lt;h3 id=&quot;捕获值&quot;&gt;捕获值&lt;/h3&gt;

&lt;p&gt;闭包可以在其定义的上下文捕获常量或变量&lt;/p&gt;

&lt;p&gt;即使定义这些变量和常量的原域已经不存在了，闭包仍然可以在闭包函数体内引用和修改这些值&lt;/p&gt;

&lt;p&gt;嵌套函数可以捕获其外部函数所有的参数以及定义的常量和变量&lt;/p&gt;

&lt;h3 id=&quot;闭包是引用类型&quot;&gt;闭包是引用类型&lt;/h3&gt;

&lt;h2 id=&quot;swift结构体&quot;&gt;Swift结构体&lt;/h2&gt;

&lt;p&gt;与C和Objective C不同的是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;结构体不需要包含实现文件和接口&lt;/li&gt;
  &lt;li&gt;结构体允许我们创建一个单一文件，且系统会自动生成面向其他代码的外部接口&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;结构体是值类型&quot;&gt;结构体是值类型&lt;/h3&gt;

&lt;p&gt;结构体实例化&lt;/p&gt;

&lt;h2 id=&quot;swift类&quot;&gt;Swift类&lt;/h2&gt;

&lt;p&gt;与其他编程语言所不同的是，Swift并不要求你为自定义类去创建独立的接口和实现文件。你所要做的是在一个单一的文件中定义一个类，系统会自动生成面向其他代码的外部接口&lt;/p&gt;

&lt;p&gt;与结构体相比，类的附加功能：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;继承允许一个类继承另一个类的特征&lt;/li&gt;
  &lt;li&gt;类型转换允许在运行时检查和解释一个类实例的类型&lt;/li&gt;
  &lt;li&gt;结构起允许一个类实例释放其任何所被分配的资源&lt;/li&gt;
  &lt;li&gt;引用计数允许对一个类的多次饮用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;类实例化&lt;/p&gt;

&lt;p&gt;因为类是引用类型，有可能有多个常量和变量在后台同时引用某一个类实例&lt;/p&gt;

&lt;p&gt;为了能够判断两个常量或者变量是否引用同一个类实例，Swift内建了恒等运算符===、!==&lt;/p&gt;

&lt;h2 id=&quot;swift属性&quot;&gt;Swift属性&lt;/h2&gt;

&lt;p&gt;属性可分为存储属性和计算属性&lt;/p&gt;

&lt;p&gt;存储属性：存储常量或变量作为实例的一部分，用于类和结构体&lt;/p&gt;

&lt;p&gt;计算属性：计算（而不是）存储一个值，用于类、结构体和枚举&lt;/p&gt;

&lt;h3 id=&quot;存储属性&quot;&gt;存储属性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;可以在定义存储属性的时候制定默认值&lt;/li&gt;
  &lt;li&gt;也可以在构造过程中设置或修改存储属性的值，甚至修改常量存储属性的值&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;延迟存储属性&quot;&gt;延迟存储属性&lt;/h3&gt;

&lt;p&gt;当第一次被调用时才会计算其初始值的属性&lt;/p&gt;

&lt;p&gt;关键字lazy&lt;/p&gt;

&lt;p&gt;必须将延迟存储属性声明成变量（使用var关键字），因为属性的值在实例构造完成之前可能无法得到。而常量属性在构造过程完成之前必须要有初始值，因此无法声明成延迟属性&lt;/p&gt;

&lt;p&gt;延迟存储属性一般用于：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;延迟对象的创建&lt;/li&gt;
  &lt;li&gt;当属性的值依赖于其他未知类&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cocoa&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;xixi&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;firstsample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firtsample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;实例化变量&quot;&gt;实例化变量&lt;/h3&gt;

&lt;p&gt;如果您有过 Objective-C 经验，应该知道Objective-C 为类实例存储值和引用提供两种方法。对于属性来说，也可以使用实例变量作为属性值的后端存储&lt;/p&gt;

&lt;p&gt;Swift 编程语言中把这些理论统一用属性来实现。Swift 中的属性没有对应的实例变量，属性的后端存储也无法直接访问。这就避免了不同场景下访问方式的困扰，同时也将属性的定义简化成一个语句。一个类型中属性的全部信息——包括命名、类型和内存管理特征——都在唯一一个地方（类型定义中）定义&lt;/p&gt;

&lt;h3 id=&quot;计算属性&quot;&gt;计算属性&lt;/h3&gt;

&lt;p&gt;计算属性不直接存储值，而是通过一个getter来获取值，一个可选的setter来间接设置其他属性或变量的值&lt;/p&gt;

&lt;p&gt;如果计算属性的setter没有定义新值的参数名，则可以使用默认名称newValue&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cocoa&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;no1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;300.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;breadth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;150.0&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;middle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;breadth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;no1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;no2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;breadth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;middle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//(150.0, 75.0)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;middle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//-150.0&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//-65.0&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;只读计算属性&quot;&gt;只读计算属性&lt;/h3&gt;

&lt;p&gt;只有getter没有setter的属性就是只读属性&lt;/p&gt;

&lt;p&gt;只读属性总是返回一个值，可以通过点运算符访问，不能设置新的值&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cocoa&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;film&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;metaInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;head&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;duration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;movie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;film&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;movie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Swift 属性&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;movie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.09&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;movie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metaInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;head&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;movie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metaInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;duration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;必须使用var关键字定义计算属性，包括只读属性，因为他们的值不是固定的&lt;/p&gt;

&lt;h3 id=&quot;属性观察器&quot;&gt;属性观察器&lt;/h3&gt;

&lt;p&gt;属性观察器监控和响应属性的值的变化，每次属性被设置值的时候都会调用属性观察器，甚至新的值和现在的值相同的时候也不例外&lt;/p&gt;

&lt;p&gt;可以为除了延迟存储属性之外的其他存储属性添加属性观察器，也可以通过属性重载的方式为继承的属性（包括存储属性和计算属性）添加属性观察期&lt;/p&gt;

&lt;p&gt;不需要为无法重载的计算属性添加属性观察器，因为可以通过setter直接监控和响应值的变化&lt;/p&gt;

&lt;p&gt;可以为属性添加如下的一个或全部观察器：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;willSet在设置新的值之前调用&lt;/li&gt;
  &lt;li&gt;didSet在新的值被设置之后调用&lt;/li&gt;
  &lt;li&gt;willSet和didSet观察器在属性初始化过程中不会被调用&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cocoa&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Samplepgm&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;willSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newTotal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;计数器: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newTotal&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;didSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;新增数 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldValue&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;NewCounter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Samplepgm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;NewCounter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;NewCounter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;全局变量和局部变量&quot;&gt;全局变量和局部变量&lt;/h3&gt;

&lt;p&gt;计算属性和属性观察器所描述的模式也可以用于全局变量和局部变量&lt;/p&gt;

&lt;h3 id=&quot;类型属性&quot;&gt;类型属性&lt;/h3&gt;

&lt;p&gt;类型属性是作为类型定义的一部分写在类型最外层的花括号内&lt;/p&gt;

&lt;p&gt;使用关键字static来定义值类型的类型属性，关键字class来为类定义类型属性&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Structname&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;storedTypeProperty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;computedTypeProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//这里返回一个Int值&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Enumname&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;storedTypeProperty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;computedTypeProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//这里返回一个Int值&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Classname&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;computedTypeProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//这里返回一个Int值&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;例子中的计算型类型属性是只读的，但也可以定义可读可写的计算型类型属性，跟实例计算属性的语法类似&lt;/p&gt;

&lt;h3 id=&quot;获取和设置类型属性的值&quot;&gt;获取和设置类型属性的值&lt;/h3&gt;

&lt;p&gt;类似于实例的属性，类型属性的访问也是通过点运算符来进行。但是，类型属性是通过类型本身来获取和设置，而不是通过实例&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cocoa&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StudMarks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;markCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;totalCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;InternalMarks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;didSet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;InternalMarks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StudMarks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;markCount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;InternalMarks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StudMarks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;markCount&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;InternalMarks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StudMarks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;totalCount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;StudMarks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;totalCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;InternalMarks&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stud1Mark1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StudMarks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stud1Mark2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StudMarks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stud1Mark1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;InternalMarks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;98&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stud1Mark1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;InternalMarks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//97&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stud1Mark2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;InternalMarks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;87&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stud1Mark2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;InternalMarks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//87&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;swift方法&quot;&gt;Swift方法&lt;/h2&gt;

&lt;p&gt;在OC中，类是唯一能定义方法的类型。但在Swift中，你不仅能选择是否要定义一个类/结构体/枚举，还能灵活的在你创建的类型上定义方法&lt;/p&gt;

&lt;h3 id=&quot;实例方法&quot;&gt;实例方法&lt;/h3&gt;

&lt;p&gt;在Swift语言中，实例方法是属于某个特定类、结构体或者枚举类型实例的方法&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可以访问和修改实例属性&lt;/li&gt;
  &lt;li&gt;提供与实例目的相关的功能&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;实例方法要写在它所属的类型的前后大括号之间&lt;/p&gt;

&lt;p&gt;实例方法能够隐式访问它所属类型的所有其他实例方法和属性&lt;/p&gt;

&lt;p&gt;实例方法只能被他所属的类的某个特定的实例所调用&lt;/p&gt;

&lt;p&gt;实例方法不能脱离于现存的实例而被调用&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;funcname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returntype&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Statement1&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Statement2&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;......&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;StatementN&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;方法的局部参数名称和外部参数名称&quot;&gt;方法的局部参数名称和外部参数名称&lt;/h3&gt;

&lt;p&gt;Swift默认仅给方法的第一个参数名称一个局部参数名称，默认同时给第二个和后续的参数名称为全局参数名称&lt;/p&gt;

&lt;h3 id=&quot;self属性&quot;&gt;self属性&lt;/h3&gt;

&lt;p&gt;类型的每一个实例都有一个隐含属性叫做self，self完全等同于该实例本身&lt;/p&gt;

&lt;p&gt;你可以在一个实例的实例方法中使用这个隐含的self属性来引用当前实例&lt;/p&gt;

&lt;h3 id=&quot;在实例方法中修改值类型&quot;&gt;在实例方法中修改值类型&lt;/h3&gt;

&lt;p&gt;Swift语言中结构体和枚举是值类型。一般情况下，值类型的属性不能在他的实例方法中被修改&lt;/p&gt;

&lt;p&gt;但是，如果你确定需要在某个具体的方法中修改结构体或者枚举的属性，你可以选择变异mutating这个方法，然后方法就可以从方法内部改变他的属性，并且他做的任何改变在方法结束时还会保留在原始结构中&lt;/p&gt;

&lt;p&gt;方法还可以给他隐含的self属性赋值一个全新的实例，这个新实例在方法结束后将替换原来的实例&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cocoa&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;breadth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;breadth&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scaleBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;breadth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;
        
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;breadth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;breadth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scaleBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scaleBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scaleBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;在可变方法中给self赋值&quot;&gt;在可变方法中给self赋值&lt;/h3&gt;

&lt;p&gt;可变方法能够赋给隐含属性self一个全新的实例&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cocoa&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;breadth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;breadth&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scaleBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;breadth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;breadth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;breadth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scaleBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;39&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;类型方法&quot;&gt;类型方法&lt;/h3&gt;

&lt;p&gt;生命结构体和枚举的类型方法，在方法的func关键字之前加上关键字static。类可能会用关键字class来允许子类重写父类的实现方法&lt;/p&gt;

&lt;p&gt;类型方法和实例方法一样用点语法调用&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cocoa&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Math&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absno&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absno&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;swift下标脚本&quot;&gt;Swift下标脚本&lt;/h2&gt;

&lt;h2 id=&quot;swift继承&quot;&gt;Swift继承&lt;/h2&gt;

&lt;h2 id=&quot;swfit可选链&quot;&gt;Swfit可选链&lt;/h2&gt;

&lt;h2 id=&quot;swfit自动引用计数&quot;&gt;Swfit自动引用计数&lt;/h2&gt;

&lt;h2 id=&quot;swfit类型转换&quot;&gt;Swfit类型转换&lt;/h2&gt;

&lt;h2 id=&quot;swift访问控制&quot;&gt;Swift访问控制&lt;/h2&gt;

&lt;h2 id=&quot;swift扩展&quot;&gt;Swift扩展&lt;/h2&gt;

&lt;p&gt;扩展就是向一个已有的类、结构体或枚举类型添加新功能&lt;/p&gt;

&lt;p&gt;扩展可以对一个类型添加新的功能，但是不能重写已有的功能&lt;/p&gt;

&lt;p&gt;Swift中的扩展可以：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;添加计算型属性和计算型静态属性&lt;/li&gt;
  &lt;li&gt;定义实例方法和类型方法&lt;/li&gt;
  &lt;li&gt;提供新的构造器&lt;/li&gt;
  &lt;li&gt;定义下标&lt;/li&gt;
  &lt;li&gt;定义和使用新的嵌套类型&lt;/li&gt;
  &lt;li&gt;使一个已有类型符合某个协议&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SomeType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//加到SomeType的新功能写到这里&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SomeType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SomeProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnotherProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//协议实现写到这里&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;计算型属性&quot;&gt;计算型属性&lt;/h3&gt;

&lt;p&gt;扩展可以向已有类型添加计算型实例属性和计算型类型属性&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;addition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;加法运算后的值：&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addition&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;subtraction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;减法运算后的值：&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subtraction&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;multiplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mul&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;乘法运算后的值：&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;multiplication&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;division&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;除法运算后的值: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;division&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;混合运算结果：&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mix&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;构造器&quot;&gt;构造器&lt;/h3&gt;

&lt;p&gt;这可以让你扩展其他类型，将你自己的定制类型作为构造器参数，或者提供该类型的原始实现中没有包含的额外初始化选项&lt;/p&gt;

&lt;h3 id=&quot;方法&quot;&gt;方法&lt;/h3&gt;

&lt;p&gt;拓展可以向已有类型添加新的实例方法和类型方法&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;topics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;summation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;nf&quot;&gt;summation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;topics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
   &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;扩展模块内&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;    
    
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;topics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
   &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;内型转换模块内&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;  
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;可变实例方法&quot;&gt;可变实例方法&lt;/h3&gt;

&lt;p&gt;通过拓展添加的实例方法也可以修改该实例本身&lt;/p&gt;

&lt;p&gt;结构体和枚举类型中修改self或其属性的方法必须将该实例方法标注为mutating，正如来自原始实现的修改方法一样&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.1415&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;trial&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;trial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;下标&quot;&gt;下标&lt;/h3&gt;

&lt;p&gt;扩展可以向一个已有类型添加新下标&lt;/p&gt;

&lt;h2 id=&quot;swift协议&quot;&gt;Swift协议&lt;/h2&gt;

&lt;p&gt;协议规定了用来实现某一特定功能所必需的方法和属性&lt;/p&gt;

&lt;p&gt;任意能够满足协议要求的类型被称为遵循这个协议&lt;/p&gt;

&lt;p&gt;类、结构体或枚举类型都可以遵循协议，并提供具体实现方法来完成协议定义的方法和功能&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SomeProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//协议内容&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SomeStructure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FirstProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnotherProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//结构体内容&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SomeClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SomeSuperClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FirstProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnotherProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//类的内容&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果类在遵循协议的同时拥有父类，应该将父类名放在协议名之前，以逗号分隔&lt;/p&gt;

&lt;h3 id=&quot;对属性的规定&quot;&gt;对属性的规定&lt;/h3&gt;

&lt;p&gt;协议用于指定的实例类型或类属性，而不用指定是存储类型或计算型属性。此外还必须指明是只读的还是可读可写的&lt;/p&gt;

&lt;p&gt;协议中的通常用var来声明变量属性，在类型声明后加上{set get}来表示属性是可读可写的，只读属性则用{get}来表示&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classa&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;marks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;attendance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;markssecured&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;classb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classa&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;present&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;classc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classb&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;marks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;96&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;present&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Swift 协议&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Protocols&quot;&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;attendance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;The &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stname&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; has secured 99% attendance&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;markssecured&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stname&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; has scored &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;marks&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;对mutating方法的规定&quot;&gt;对Mutating方法的规定&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daysofaweek&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daysofaweek&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thurs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sat&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sun&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Sunday&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;mon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mon&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Monday&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tue&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Tuesday&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wed&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Wednesday&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;thurs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thurs&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Wednesday&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fri&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Wednesday&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sat&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Saturday&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;NO Such Day&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wed&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;对构造器的规定&quot;&gt;对构造器的规定&lt;/h3&gt;

&lt;p&gt;协议可以要求他的遵循者实现指定的构造器&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SomeProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;someParameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;协议构造器规定在类中的实现&quot;&gt;协议构造器规定在类中的实现&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SomeClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SomeProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;someParameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 构造器实现&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcpprotocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aprot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tcpClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcpprotocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aprot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用required修饰符可以保证：所有的遵循该协议的子类，同样能为构造器规定提供一个显式的实现或继承实现&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcpprotocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;no1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mainClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;no1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 局部变量&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;no1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 初始化&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;subClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mainClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tcpprotocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;no2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;no1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;no2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no2&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;no1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 因为遵循协议，需要加上&quot;required&quot;; 因为继承自父类，需要加上&quot;override&quot;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;convenience&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;no1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;no1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;no2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mainClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;no1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;no1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;no2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;res is: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;res is: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;res is: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no2&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;协议类型&quot;&gt;协议类型&lt;/h3&gt;

&lt;p&gt;尽管协议本身不实现任何功能，但是协议可以被当作类型来使用&lt;/p&gt;

&lt;p&gt;协议可以像其他普通类型一样。使用场景：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;作为函数、方法或构造器中的参数类型或返回值类型&lt;/li&gt;
  &lt;li&gt;作为常量、变量或属性的类型&lt;/li&gt;
  &lt;li&gt;作为数组、字典或其他容器中的元素类型&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;在拓展中添加协议成员&quot;&gt;在拓展中添加协议成员&lt;/h3&gt;

&lt;h3 id=&quot;协议的继承&quot;&gt;协议的继承&lt;/h3&gt;

&lt;p&gt;协议的继承语法与类的继承相似，多个被继承的协议间用逗号分隔&lt;/p&gt;

&lt;h3 id=&quot;类专属协议&quot;&gt;类专属协议&lt;/h3&gt;

&lt;p&gt;通过添加class关键字，限制协议只能适配到类类型&lt;/p&gt;

&lt;p&gt;class关键字必须是第一个&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SomeClassOnlyProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SomeInheritedProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//协议定义&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;协议合成&quot;&gt;协议合成&lt;/h3&gt;

&lt;p&gt;Swift支持合成多个协议，这在我们需要同时遵循多个协议时非常有用&lt;/p&gt;

&lt;h3 id=&quot;检验协议的一致性&quot;&gt;检验协议的一致性&lt;/h3&gt;

&lt;p&gt;使用is和as操作符来检查是否遵循某一协议或强制转化为某一类型&lt;/p&gt;

&lt;h2 id=&quot;swift泛型&quot;&gt;Swift泛型&lt;/h2&gt;

&lt;p&gt;Swift提供了泛型让你写出灵活且可重用的函数和类型&lt;/p&gt;

&lt;p&gt;Swift标准库是通过泛型代码构建出来的&lt;/p&gt;

&lt;p&gt;Swift的数组和字典类型都是泛型集&lt;/p&gt;

&lt;p&gt;功能代码是相同的，只是类型上不一样，这是我们可以使用泛型，从而避免重复编写代码&lt;/p&gt;

&lt;p&gt;泛型使用了占位类型名（在这里用字母T来表示）来代替实际类型名&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swapTwoStrings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inout&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inout&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;temporaryA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temporaryA&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swapTwoDoubles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inout&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inout&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;temporaryA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temporaryA&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 定义一个交换两个变量的函数&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swapTwoValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inout&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inout&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;temporaryA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temporaryA&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;numb1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;numb2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;
 
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;交换前数据:  &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numb1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; 和 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numb2&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;swapTwoValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numb1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numb2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;交换后数据: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numb1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; 和 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numb2&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;
 
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;交换前数据:  &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; 和 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;swapTwoValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;交换后数据: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; 和 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;swapTwoValues后面跟着占位类型名，并用尖括号括起来。这个尖括号告诉Swift那个T是swapTwoValues()函数定义内的一个占位类型名，因此Swift不会去查找名为T的实际类型&lt;/p&gt;

&lt;h3 id=&quot;泛型类型&quot;&gt;泛型类型&lt;/h3&gt;

&lt;p&gt;Swift允许你定义你自己的泛型类型&lt;/p&gt;

&lt;p&gt;自定义类、结构体和枚举作用于任何类型，如同Array和Dictionary的用法&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// Int型的栈&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IntStack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeLast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 泛型的栈&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeLast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stackOfStrings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stackOfStrings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;google&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;拓展泛型类型&quot;&gt;拓展泛型类型&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeLast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Stack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;topItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stackOfStrings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;字符串元素入栈: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stackOfStrings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;google&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stackOfStrings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;runoob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;topItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stackOfStrings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;栈中的顶部元素是：&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topItem&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stackOfStrings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;类型约束&quot;&gt;类型约束&lt;/h3&gt;

&lt;p&gt;类型约束制定了一个必须继承自指定类的类型参数名或者遵循一个特定的协议或协议构成&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SomeClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SomeProtocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;someT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;someU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//这里是泛型函数的函数体部分&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// 非泛型函数，查找指定字符串在数组中的索引&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ofString&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;valueToFind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enumerated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valueToFind&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 找到返回索引值&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
 
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;strings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;google&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;weibo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;taobao&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;runoob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;facebook&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;foundIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ofString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;runoob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;runoob 的索引为 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foundIndex&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 16 Sep 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/09/16/Swift_tutorial/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/09/16/Swift_tutorial/</guid>
        
        <category>Swift</category>
        
        <category>iOS</category>
        
        <category>学习笔记</category>
        
        
      </item>
    
      <item>
        <title>Swift closures</title>
        <description>&lt;h1 id=&quot;swift&quot;&gt;Swift&lt;/h1&gt;

&lt;h2 id=&quot;closures&quot;&gt;Closures&lt;/h2&gt;

&lt;p&gt;闭包是独立的函数块，可以在代码中传递和使用。Swift中的闭包类似于C和Objective-C中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;block&lt;/code&gt;以及其他编程语言中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lambdas(匿名函数)&lt;/code&gt;。闭包可以捕获和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;存储&lt;/code&gt;上下文中定义的任何常量和变量的引用。 全局函数和嵌套函数实际上是闭包的特例。闭包采用以下三种形式之一：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;全局函数是具有名称但不捕获任何值的闭包。&lt;/li&gt;
  &lt;li&gt;嵌套函数是具有名称并且可以从其封闭函数中捕获值的闭包。&lt;/li&gt;
  &lt;li&gt;Closure表达式是一种未命名的可以从周围的上下文中捕获值的闭包，用轻量级语法编写。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Swift的闭包表达式鼓励简洁，因此闭包具备：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;从上下文中推断参数和返回值类型&lt;/li&gt;
  &lt;li&gt;单表达式闭包的隐式返回&lt;/li&gt;
  &lt;li&gt;简洁的参数名称&lt;/li&gt;
  &lt;li&gt;尾随闭包语法&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;闭包表达式&quot;&gt;闭包表达式&lt;/h3&gt;

&lt;p&gt;对于内联闭包表达式，参数和返回类型写在花括号内，而不是在花括号外。闭包的方法体的开头由&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;/code&gt;关键字引入。这个关键字表示闭包的参数和返回类型的定义已经完成，闭包的方法体即将开始&lt;/p&gt;

&lt;h3 id=&quot;尾随闭包&quot;&gt;尾随闭包&lt;/h3&gt;

&lt;p&gt;如果需要将闭包表达式作为函数的最终参数传递给函数，并且闭包表达式很长，则可以将其写为尾随闭包。写法：尾随闭包写在函数调用的圆括号之后，即它是函数的最终参数。如果尾随闭包作为函数的最终参数，并且定义了相应的参数标签，在使用尾随闭包语法时，不能将闭包的参数标签写为函数调用的一部分。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;//定义一个闭包表达式为函数最终参数的函数&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;trailingClosures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; 期待下：trailingClosures&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//可以有非尾随闭包的调用形式&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;blockFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;paramter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paramter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;trailingClosures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;不是尾随闭包写法1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blockFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;trailingClosures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;不是尾随闭包写法2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)})&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;trailingClosures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;不是尾随闭包写法3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)})&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//!&amp;lt; 参数类型和返回值可以根据函数类型得知，故可以省略&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//尾随闭包写法的调用形式，block函数标签不能出现在圆括号内&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;trailingClosures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;尾随闭包的写法&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
 &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;若闭包表达式是函数的唯一参数，在调用该函数时，若采用尾随闭包的写法，则不需要再函数名称之后写一对圆括号&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;()&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;值的捕获&quot;&gt;值的捕获&lt;/h3&gt;

&lt;p&gt;闭包可以从定义它的周围上下文中捕获常量和变量。闭包可以在其方法体中引用并修改常量和变量的值，即使定义常量和变量的原始作用域不存在。 在Swift中，一个闭包可以捕获值的最简单形式就是嵌套函数。一个嵌套函数可以捕获任何它外围函数的参数也可以捕获定义在外围函数里的常量和变量。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;//阐述闭包捕获值的函数方法。&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createIncrementer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forIncrese&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//定义嵌套函数外部的变量&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//定义一个嵌套函数&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;increase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//返回此嵌套函数&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;increase&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;increaseByTen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createIncrementer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forIncrese&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//increaseByTen其实是内部的嵌套函数（闭包的一种），捕获了`createIncrementer`方法的参数`amount`与方法体中定义的`total`变量。&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;increaseByTen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//!&amp;lt; log:10&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;increaseByTen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//!&amp;lt; log:20&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;increaseByTen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//!&amp;lt; log:30 综上述`increaseByTen`函数捕获了捕获了`createIncrementer`方法的参数`amount`与方法体中定义的`total`变量，并在其内部持有了外部变量`total`和外部方法参数`amount`的副本。以至于`increaseByTen`可以每次调用都能基于`amount`的值，对变量`total`进行递增，并且返回结果。&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;increaseBySix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createIncrementer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forIncrese&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;increaseBySix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//!&amp;lt; log:6&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;increaseBySix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//!&amp;lt; log:12&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;increaseBySix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//!&amp;lt; log:18 综上述：`increaseBySix`是调用了`createIncrementer`生成的一个`()-&amp;gt;Int`类型的常量。在生成的过程中，内部的闭包（嵌套函数）`increase`重新捕获了外部变量`total`和外部方法参数`amount`，并返回此方法赋值给了`increaseBySix`，以至于`increaseBySix`和`increaseByTen`具备不同的递增系数。本质上这是两个不同的函数类型的常量。&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上述示例中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;increaseByTen&lt;/code&gt;其实是内部的嵌套函数（闭包的一种）&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;increase&lt;/code&gt;。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;increaseByTen&lt;/code&gt;函数捕获了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createIncrementer&lt;/code&gt;方法的参数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amount&lt;/code&gt;与方法体中定义的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;total&lt;/code&gt;变量，并在其内部持有了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;increaseByTen&lt;/code&gt;函数捕获的值的副本。以至于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;increaseByTen&lt;/code&gt;可以每次调用都能基于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amount&lt;/code&gt;的值，对变量&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;total&lt;/code&gt;进行递增，并且返回结果。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;increaseBySix&lt;/code&gt;是调用了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createIncrementer&lt;/code&gt;生成的另一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;()-&amp;gt;Void&lt;/code&gt;类型的常量。在生成的过程中，内部的闭包（嵌套函数）&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;increase&lt;/code&gt;重新捕获了外部变量&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;total&lt;/code&gt;和外部方法参数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amount&lt;/code&gt;，并返回此方法赋值给了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;increaseBySix&lt;/code&gt;，以至于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;increaseBySix&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;increaseByTen&lt;/code&gt;具备不同的递增系数，并且分别进行多次调用。本质上这是两个不同的函数类型的常量。&lt;/p&gt;

&lt;p&gt;如果值不会被闭包改变，并且闭包创建以后值也不会被改变。Swift可以代替闭包捕获和存储值的一个副本。Swift也会参与处理所有不再需要的变量的内存管理&lt;/p&gt;

&lt;h3 id=&quot;闭包是引用类型&quot;&gt;闭包是引用类型&lt;/h3&gt;

&lt;p&gt;函数和闭包是引用类型。无论何时将函数或闭包赋值给常量或变量，实际上都是将该常量或变量设置为对函数或闭包的引用。意味着如果为两个不同的常量或变量分配同一个闭包，那么这两个常量或变量都将引用的是相同的闭包。&lt;/p&gt;

&lt;h3 id=&quot;逃逸闭包&quot;&gt;逃逸闭包?&lt;/h3&gt;

&lt;p&gt;闭包作为函数参数进行传递，但是该闭包并未在函数返回前调用，而是在函数返回后才被调用，则这个闭包被称为逃逸了。当我们声明一个以闭包作为参数之一的函数时，我们可以在该闭包参数的类型之前书写&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@escaping&lt;/code&gt;来表示该闭包允许逃逸。即：允许该闭包在函数结束后仍然可以被调用。 当一个函数需要用到异步操作回调的时候需要使用逃逸闭包。 实现闭包逃逸的一种途径是通过将该闭包存储到定义在函数外面的变量中，稍后再去调用&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;escapeClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//声明一个闭包类型的数组&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;closureArray&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//模仿闭包逃逸:写完 closureArray.append编译器检测到时逃逸闭包提示添加@escaping&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;escapeClosures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;closureArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//类方法&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;startEscape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;escapeObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;escapeClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;escapeObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;escapeClosures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;场景1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;场景1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//!&amp;lt; 场景1逃逸闭包1被调用了&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;escapeObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;escapeClosures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;场景2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;场景2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//!&amp;lt; 场景2逃逸闭包2被调用了&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//使用迭代器进行下标和元素的同时遍历&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;escapeObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;closureArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enumerated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;逃逸闭包&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;被调用了&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//调用&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;escapeClosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;startEscape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//!&amp;lt; 场景1逃逸闭包1被调用了 场景2逃逸闭包2被调用了&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;自动闭包&quot;&gt;自动闭包?&lt;/h3&gt;
</description>
        <pubDate>Wed, 16 Sep 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/09/16/Swift_closures/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/09/16/Swift_closures/</guid>
        
        <category>Swift</category>
        
        <category>iOS</category>
        
        <category>学习笔记</category>
        
        
      </item>
    
      <item>
        <title>CS193P（3）</title>
        <description>&lt;h1 id=&quot;cs193p3&quot;&gt;CS193P（3）&lt;/h1&gt;

&lt;p&gt;.font(Font.largeTitle) 声明式 本质上是时间不敏感的&lt;/p&gt;

&lt;p&gt;body由system调用&lt;/p&gt;

&lt;p&gt;ViewBuilder是返回视图的函数，不能在ViewBuilder中创建var&lt;/p&gt;

&lt;p&gt;body是计算属性，不是函数&lt;/p&gt;

&lt;p&gt;search+replace or Command+Click+rename&lt;/p&gt;

&lt;p&gt;反应式 当模型发生变化，他们将自动显示在视图中&lt;/p&gt;

&lt;p&gt;函数参数默认let Cannot assign to property&lt;/p&gt;

&lt;p&gt;因为结构是指类型，mutating func拥有修改自我的功能，class可以直接修改（指针 引用类型）&lt;/p&gt;

&lt;p&gt;所有初始化都是mutating，所以不用声明muating&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;TODO: bogus! 提醒自己需要解决此问题，会出现在Xcode顶部&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;ObservableObject 协议&lt;/p&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;var objectWillChange: ObservableObjectPublisher&lt;/p&gt;

&lt;p&gt;objectWillChange.send()&lt;/p&gt;

&lt;p&gt;@published 属性包装器 每次这个属性改变，将会调用objectWillChange.send()&lt;/p&gt;

&lt;p&gt;@ObservedObject 标记为对该发布感兴趣 反应式编程&lt;/p&gt;

&lt;p&gt;SwiftUI不会全部重绘&lt;/p&gt;

&lt;p&gt;slides 幻灯片&lt;/p&gt;

&lt;p&gt;protocol就像是精简的类或结构，具有功能和变量而被剥离，没有实施&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Moveable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hasMoved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;distanceFromStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Moveable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hasMoved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distanceFromStart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;protocol is a type？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-11 下午5.10.37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;protocol extension 可以添加默认实现&lt;/p&gt;

&lt;p&gt;extension adding code to a struct or class via an extension&lt;/p&gt;

&lt;p&gt;Why protocols？&lt;/p&gt;

&lt;p&gt;It’s the promise of encapsulation from OOP but taken to a higher level.&lt;/p&gt;

&lt;p&gt;这就是函数式编程，或实际上我们可以称之为面向协议的编程就是这样。这是关于规范数据结构的方式，在我们的应用程序功能中，他们的行为方式。专注于功能，忽略了实现细节。&lt;/p&gt;

&lt;p&gt;Just talking about the function.&lt;/p&gt;

&lt;p&gt;And this is even more powerful when we combine it with generics.&lt;/p&gt;

&lt;p&gt;Generics and Protocols      super powers&lt;/p&gt;

&lt;p&gt;Self 协议中一种特殊的类型名称表示实际类型正在实施此协议&lt;/p&gt;

&lt;p&gt;协议本身没有实现，它通过结构和类实现&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Greatness&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isGreaterThan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Greatness&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;greatest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greatest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calling&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isGreaterThan&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;where 泛型和协议连接的关键&lt;/p&gt;

&lt;p&gt;Help！&lt;/p&gt;

&lt;p&gt;Some of you might be shivering a bit right now.&lt;/p&gt;

&lt;p&gt;You might be thinking, “how am I going to design systems using generics/protocols?!”&lt;/p&gt;

&lt;p&gt;This is, indeed, a powerful foundation for designing things.&lt;/p&gt;

&lt;p&gt;But functional programming does require some mastery that only comes with experience.&lt;/p&gt;

&lt;p&gt;The good news: you can do a lot in SwiftUI without having to master functional programming.&lt;/p&gt;

&lt;p&gt;But the more you use it, the more you’ll want to be “grokking” it.&lt;/p&gt;

&lt;p&gt;That’s why I explain to you up front what’s going on.&lt;/p&gt;

&lt;p&gt;No one expects you to now be able to be adding extensions to protocols with generics!&lt;/p&gt;

&lt;p&gt;But eventually you will be able to.&lt;/p&gt;

&lt;p&gt;And in the meantime, you’ll have at least some idea how SwiftUI is built.&lt;/p&gt;

&lt;p&gt;Layout&lt;/p&gt;

&lt;p&gt;Container View（HStack VStack）&lt;/p&gt;

&lt;p&gt;不灵活的视图优先 例如图片&lt;/p&gt;

&lt;p&gt;空间分配&lt;/p&gt;

&lt;p&gt;Spacer(minLength: CGFloat) 垫片&lt;/p&gt;

&lt;p&gt;尽量使用默认值 默认值就很赞&lt;/p&gt;

&lt;p&gt;Divider() 不占用任何空间&lt;/p&gt;

&lt;p&gt;.layoutPriority(100)&lt;/p&gt;

&lt;p&gt;the default layout priority is 0&lt;/p&gt;

&lt;p&gt;VStack(alignment: .leading) {…}&lt;/p&gt;

&lt;p&gt;You can even define your own “things to line up” alignment guides. But that’s a bit beyond the scope of this course.&lt;/p&gt;

&lt;p&gt;内置&lt;/p&gt;

&lt;p&gt;Modifiers&lt;/p&gt;

&lt;p&gt;Remember that View modifier functions (like .padding) themselves return a View.&lt;/p&gt;

&lt;p&gt;.aspectRatio smaller .fit bigger .fill contentMode&lt;/p&gt;

&lt;p&gt;可以选择更大的尺寸，但我们不希望View互相溢出&lt;/p&gt;

&lt;p&gt;How does a View know what space was offered to it so it can try to adapt?&lt;/p&gt;

&lt;p&gt;Using a special View called a GeometryReader&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;GeometryReader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;geometry&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Safe Area&lt;/p&gt;

&lt;p&gt;.edgesIgnoringSafeArea([.top])&lt;/p&gt;

&lt;p&gt;Container&lt;/p&gt;

&lt;p&gt;.frame(…)&lt;/p&gt;

&lt;p&gt;.position(CGPoint)&lt;/p&gt;

&lt;p&gt;.offset(CGPoint)&lt;/p&gt;

&lt;p&gt;.font(Font.system(size: CGFloat))&lt;/p&gt;

&lt;p&gt;Geometry.size.width Geometry.size.height&lt;/p&gt;

&lt;p&gt;编码风格&lt;/p&gt;

&lt;p&gt;magic numbers 控制面板记录常数&lt;/p&gt;

&lt;p&gt;// MARK: - Drawing Constants&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-11 下午9.35.30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Sep 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/09/16/CS193P-3/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/09/16/CS193P-3/</guid>
        
        <category>Swift</category>
        
        <category>SwiftUI</category>
        
        <category>iOS</category>
        
        <category>学习笔记</category>
        
        
      </item>
    
      <item>
        <title>CS193P（2）</title>
        <description>&lt;h1 id=&quot;cs193p2&quot;&gt;CS193P（2）&lt;/h1&gt;

&lt;p&gt;MVVM Model-View-ViewModel&lt;/p&gt;

&lt;p&gt;反应式用户界面 代码组织模型&lt;/p&gt;

&lt;p&gt;UIKit遵循MVC&lt;/p&gt;

&lt;p&gt;命令式模型为什么对UI不利：需要时间维度，函数调用的时间顺序&lt;/p&gt;

&lt;p&gt;声明型模型：时间独立&lt;/p&gt;

&lt;p&gt;可以确定总是看起来就像你看到的在前面声明的代码中，优势在于理解您的代码将如何工作，确保没有随机的事情发生&lt;/p&gt;

&lt;p&gt;反应式编程，对模型中的更改作出反应&lt;/p&gt;

&lt;p&gt;model可能很复杂 viewmodel作为该模型数据的解释器，可简化一些数据结构，有助于实时更新的实现&lt;/p&gt;

&lt;p&gt;viewmodel不会直接和view对话，没有视图的指针&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-11 上午10.25.21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What about the other direction？&lt;/p&gt;

&lt;p&gt;另一种相关的架构Model-View-Intent，SwiftUI尚未实现一个意图系统&lt;/p&gt;

&lt;p&gt;意图作为一种concept&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-11 上午10.30.03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;结构和类大致相似&lt;/p&gt;

&lt;p&gt;struct Value type&lt;/p&gt;

&lt;p&gt;class Reference type&lt;/p&gt;

&lt;p&gt;函数式编程侧重于事物的功能&lt;/p&gt;

&lt;p&gt;面向对象的编程侧重于封装数据，并将功能放入某个容器&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-11 上午10.49.11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Generics 泛型&lt;/p&gt;

&lt;p&gt;Example of a user of a don’t care type: Array&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Functions as Types 函数类型&lt;/p&gt;

&lt;p&gt;Closures本质是内联函数，捕获值&lt;/p&gt;

&lt;p&gt;private var model 只能通过EmojiMemoryGame访问&lt;/p&gt;

&lt;p&gt;private(set) var model 玻璃门，其他人可以看到model，但只有EmojiMemoryGame能修改model&lt;/p&gt;

&lt;p&gt;可以有多个init根据参数选择&lt;/p&gt;

&lt;p&gt;类型推断&lt;/p&gt;

&lt;p&gt;因为这是函数式编程，所以我们要传递很多函数作为其他函数的参数&lt;/p&gt;

&lt;p&gt;我们不能在类或结构上使用任何函数直到所有这些都已初始化&lt;/p&gt;

&lt;p&gt;static func 类型上的函数&lt;/p&gt;

&lt;p&gt;static let static var&lt;/p&gt;

&lt;p&gt;option ？&lt;/p&gt;

&lt;p&gt;任何可迭代的东西必须是可识别的 identifiable&lt;/p&gt;

&lt;p&gt;swift的print十分强大，可以直接打印很多东西&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Sep 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/09/16/CS193P-2/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/09/16/CS193P-2/</guid>
        
        <category>Swift</category>
        
        <category>SwiftUI</category>
        
        <category>iOS</category>
        
        <category>学习笔记</category>
        
        
      </item>
    
      <item>
        <title>CS193P（1）</title>
        <description>&lt;h1 id=&quot;cs193p1&quot;&gt;CS193P（1）&lt;/h1&gt;

&lt;p&gt;Swift支持面向对象的编程，还支持函数式编程或面向协议的编程&lt;/p&gt;

&lt;p&gt;用户界面范例也称为反应式，它是声明性的而不是命令性的&lt;/p&gt;

&lt;p&gt;iOS的基础都是用Objective-C语言编写的，这是C的面向对象版本&lt;/p&gt;

&lt;p&gt;Swift完全兼容使用OC，引入了很多现代语言功能，特别是对函数式编程的支持&lt;/p&gt;

&lt;p&gt;SwiftUI基于函数式编程，而不是面向对象的编程&lt;/p&gt;

&lt;p&gt;SwiftUI都是基于Swit&lt;/p&gt;

&lt;p&gt;SwiftUI不能兼容所有领域，但是UIKit可以&lt;/p&gt;

&lt;p&gt;Core Data 面向对象数据库&lt;/p&gt;

&lt;p&gt;import Foundation 是一种数组、字典和字符串&lt;/p&gt;

&lt;p&gt;SwiftUI依赖于Foundation，所以import SwiftUI后不用import Foundation&lt;/p&gt;

&lt;p&gt;struct ContentView: View 声明ContentView的行为类似于View 这不是面向对象编程，这是功能编程&lt;/p&gt;

&lt;p&gt;var body 其值不在内存中，而是计算此var 计算属性&lt;/p&gt;

&lt;p&gt;Swift是一种非常强类型的语言。这意味着每一个变量都有特定的类型，并始终具有价值&lt;/p&gt;

&lt;p&gt;RoundedRectangle()&lt;/p&gt;

&lt;p&gt;ZStack(content:{})&lt;/p&gt;

&lt;p&gt;Shapes can be stroke&lt;/p&gt;

&lt;p&gt;.stroke(lineWidth:) return another view&lt;/p&gt;

&lt;p&gt;.foregroundColor(Color.orange)&lt;/p&gt;

&lt;p&gt;.padding()&lt;/p&gt;

&lt;p&gt;里面的会屏蔽外面的&lt;/p&gt;

&lt;p&gt;RoundedRectangle(cornerRadius: 10.0).fill(Color.white)&lt;/p&gt;

&lt;p&gt;RoundedRectangle(cornerRadius: 10.0).stroke(lineWidth: 3)&lt;/p&gt;

&lt;p&gt;.font(Font.largeTitle)&lt;/p&gt;

&lt;p&gt;ForEach(iteratablething, content: { index in&lt;/p&gt;

&lt;p&gt;})&lt;/p&gt;

&lt;p&gt;直接使用产生多个预览 制作多个视图的一种方法 返回多个视图&lt;/p&gt;

&lt;p&gt;HStack(spacing: ,content: {&lt;/p&gt;

&lt;p&gt;​	ForEach()&lt;/p&gt;

&lt;p&gt;})&lt;/p&gt;

&lt;p&gt;只返回一个视图&lt;/p&gt;

&lt;p&gt;.padding(.top, 10)&lt;/p&gt;

&lt;p&gt;ZStack允许放置if&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-10 下午7.08.06.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 16 Sep 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/09/16/CS193P-1/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/09/16/CS193P-1/</guid>
        
        <category>Swift</category>
        
        <category>SwiftUI</category>
        
        <category>iOS</category>
        
        <category>学习笔记</category>
        
        
      </item>
    
      <item>
        <title>看了点金融学mooc？</title>
        <description>&lt;h1 id=&quot;金融学原理&quot;&gt;金融学原理&lt;/h1&gt;

&lt;h2 id=&quot;第一章-对金融学进行界定&quot;&gt;第一章 对金融学进行界定&lt;/h2&gt;

&lt;h3 id=&quot;金融学的定义金融学是研究人们怎样进行稀缺资源跨期配置的学科&quot;&gt;金融学的定义：金融学是研究人们怎样进行稀缺资源跨期配置的学科&lt;/h3&gt;

&lt;h3 id=&quot;金融体系&quot;&gt;金融体系&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;金融工具&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;资金跨期配置的载体&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;金融中介机构&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;资金跨期配置的经济实体&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;金融市场&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;资金跨期配置的场所&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;企业是为社会提供商品和劳务的经济实体&quot;&gt;企业是为社会提供商品和劳务的经济实体&lt;/h3&gt;

&lt;h2 id=&quot;第二章-企业的组织形式&quot;&gt;第二章 企业的组织形式&lt;/h2&gt;

&lt;h3 id=&quot;财产的组织形式和承担的法律责任&quot;&gt;财产的组织形式和承担的法律责任&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;自然人企业&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;独资企业&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;无限责任&lt;/li&gt;
          &lt;li&gt;管理成本低&lt;/li&gt;
          &lt;li&gt;无重复纳税&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;合伙人企业&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;只缴纳个人所得税&lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;无限责任&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;LP 负有有限责任的合伙人 通常只出资，不参与企业日常决策&lt;/li&gt;
              &lt;li&gt;GP 负有无限责任的合伙人 出资少，但负责企业日常规划&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;公司（法人企业）&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;公司以其全部财产对企业债务承担有限责任&lt;/li&gt;
      &lt;li&gt;股东拥有公司的股权或所有权&lt;/li&gt;
      &lt;li&gt;股东一旦购买股份出资，就是公司的法人财产，法人财产不可分割，股东不能要回自己的出资可在二级市场出售转让&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;有限责任公司&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;2-50人共同出资&lt;/li&gt;
          &lt;li&gt;以其认缴的出资额为限对公司债务承担责任&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;股份有限公司&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;2人以上200人以下为发起人&lt;/li&gt;
          &lt;li&gt;一半以上发起人在中国境内有住所，注册资本最低限500万&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;特点&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;法人财产&lt;/li&gt;
          &lt;li&gt;股东有限责任&lt;/li&gt;
          &lt;li&gt;股份可以转让&lt;/li&gt;
          &lt;li&gt;募集的资金在理论上 可以很多&lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;双重纳税&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;公司所得税&lt;/li&gt;
              &lt;li&gt;红利税&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;所有权和管理权分离&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;公司是最为重要的一种 现代企业&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;公司治理机制&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;股东大会&lt;/li&gt;
          &lt;li&gt;董事会&lt;/li&gt;
          &lt;li&gt;总经理&lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;监事会&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;代表员工利益&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;公司的委托代理问题&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;分散股权结构下的股东和管理层之间的委托代理问题&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;管理层花公司的钱给办公室坐豪华装修&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;集中股权下的小股东和大股东之间&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;公司向其大股东的公司低价提供产品&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;负债经营的公司的债权人和股东之间&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;公司将其借款来的资金投资在高风险的投资项目上&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;解决公司委托代理问题&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;激励机制&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;通过薪酬激励或管理层持股&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;监督机制&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;通过公司治理结构分配的权利&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;市场机制&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;资本市场的控制权争夺，敌意接管&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;公司的目标&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;最大化股东的财富&lt;/li&gt;
          &lt;li&gt;核心取决于众多因素&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;第三章-金融学五大原理&quot;&gt;第三章 金融学五大原理&lt;/h2&gt;

&lt;h3 id=&quot;现金流是很重要的&quot;&gt;现金流是很重要的&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;利润就是企业的盈利&lt;/li&gt;
  &lt;li&gt;企业的利润总额是由营业利润、投资收益和营业外收支差额三个主要部分构成&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;利润与现金流都能反映企业经营绩效、但又有不同&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;利润是在应收应记制下得到的&lt;/li&gt;
      &lt;li&gt;现金流是在收付实现制下得到的&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;利润较高的含义是指：企业具有一定的盈利能力，利润结构基本合理，利润中的现金比率高&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果企业的应收账款多，企业的利润中真正可用的现金就少&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;利润反映了企业的经营成果，越大当然越好，但只有高质量的利润，企业的财务才是健康的&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;一个企业可以亏损，但只要现金流好，企业可以继续生存下来，最终通过成本下降收入的上升，实现盈利&lt;/li&gt;
  &lt;li&gt;但是，如果一个企业现金流紧张，存活的可能性就没有了，实现盈利就无从谈起&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;货币具有时间价值&quot;&gt;货币具有时间价值&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;投资收益或机会成本是造成货币时间价值的原因&lt;/li&gt;
  &lt;li&gt;未来的钱不如现在的钱值钱&lt;/li&gt;
  &lt;li&gt;货币的时间价值是我们金融决策时必须考虑的，因为金融决策的主要特点就是跨期配置资金&lt;/li&gt;
  &lt;li&gt;将现在的资金数量转换成等值的未来资金的数量，或将未来的资金数量转换为现在等值的资金数量，就是所谓的复利或折现&lt;/li&gt;
  &lt;li&gt;由于通常金融决策发生在当前，所以折现是我们金融决策最常用的换算方法&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;承担风险需要相应的回报&quot;&gt;承担风险需要相应的回报&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;推迟消费要得到的补偿&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;无风险收益是投资者对推迟消费最低的补偿要求&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;承担风险得到的补偿&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;投资风险越高，投资者要求的收益补偿就越高&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;所需要的回报是投资者期望的回报，与投资的实际回报是两个不同的概念&lt;/li&gt;
  &lt;li&gt;风险与回报成正比，回报是预期回报，高风险项目有时会导致较低的实际回报&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;市场价格通常是正确的&quot;&gt;市场价格通常是正确的&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;有效市场是在该市场中交易的资产的价格在任何时刻充分反映所有可用信息的市场&lt;/li&gt;
  &lt;li&gt;像纽交所或深交所这样的证券市场是否有效，取决于新发布的信息被纳入价格的速度&lt;/li&gt;
  &lt;li&gt;一个有效的股票市场的特点是拥有大量的以营利为目的的个人，他们通过买卖股票来应对新信息的发布&lt;/li&gt;
  &lt;li&gt;有效市场理论的关键点，股票的价格是其价值的晴雨表&lt;/li&gt;
  &lt;li&gt;任何有利于企业价值增值的经营行为，都会传递出相应的消息，从而刺激股价上升&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;有效市场假说&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;基于投资者理性的假说&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;行为金融&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;基于投资者情绪化的假说&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;委托代理关系&quot;&gt;委托代理关系&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;简单的说，只要一个人依赖于另一个人的活动，那么委托代理关系就产生了&lt;/li&gt;
  &lt;li&gt;由于客观上委托方和代理方存在依赖关系，而双方的利益函数不一样，加上信息不对称导致监管成本很高&lt;/li&gt;
  &lt;li&gt;常常出现代理人损害委托人利益的情形&lt;/li&gt;
  &lt;li&gt;当我们考虑金融决策时，不管是买股票或买基金，上市公司和基金公司都有委托代理问题&lt;/li&gt;
  &lt;li&gt;而这样的委托代理问题，对投资者来说，可能遭遇投资价值下降的风险&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;五个原理从不同的方面提醒我们金融决策的 独特性&lt;/li&gt;
  &lt;li&gt;不要把鸡蛋放在一个篮子里，控制风险&lt;/li&gt;
  &lt;li&gt;相似度很大的产品价格应该差不多，一价定律&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;第四章-金融市场与金融机构&quot;&gt;第四章 金融市场与金融机构&lt;/h2&gt;

&lt;h3 id=&quot;金融市场&quot;&gt;金融市场&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;交易金融工具的场所&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;分类&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;按照交易的工具&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;按照经营场所&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;场内交易市场，有固定交易场所&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;纽交所&lt;/li&gt;
              &lt;li&gt;上交所&lt;/li&gt;
              &lt;li&gt;深交所&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;场外交易场所，由电子交易系统&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;NASDAQ&lt;/li&gt;
              &lt;li&gt;债券市场&lt;/li&gt;
              &lt;li&gt;外汇市场&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;按照资金交易期限&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;资本市场，供应一年以上的中长期资金&lt;/li&gt;
          &lt;li&gt;货币市场，一年以下的短期资金的融通市场&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;按照交易性质&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;股票或债券的一级市场&lt;/li&gt;
          &lt;li&gt;股票或债券的二级市场&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;按照交割期限&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;金融现货市场&lt;/li&gt;
          &lt;li&gt;金融期货市场&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;金融机构提供金融服务和金融产品的企业&quot;&gt;金融机构，提供金融服务和金融产品的企业&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;商业银行&lt;/li&gt;
  &lt;li&gt;投资银行&lt;/li&gt;
  &lt;li&gt;保险公司&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;共同基金&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;一种专业投资公司发行的基金份额&lt;/li&gt;
      &lt;li&gt;专业的投资公司：基金管理公司&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;根据基金募集资金投向和申赎方式，基金可以分为不同类别&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;封闭式基金&lt;/li&gt;
          &lt;li&gt;开放式基金&lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;ETF：交易型开放式指数基金&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;封闭&lt;/li&gt;
              &lt;li&gt;开放&lt;/li&gt;
              &lt;li&gt;指数基金&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;风险投资企业&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;投资于创业期企业的基金&lt;/li&gt;
      &lt;li&gt;风险投资企业的直接投资主体往往采用合伙企业组织形式&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;其他金融机构&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;养老基金&lt;/li&gt;
      &lt;li&gt;资产管理企业&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;信息服务企业&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;会计师事务所&lt;/li&gt;
          &lt;li&gt;律师事务所&lt;/li&gt;
          &lt;li&gt;管理机构&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;金融监管机构&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;第五章-金融的功能&quot;&gt;第五章 金融的功能&lt;/h2&gt;

&lt;h3 id=&quot;资金流动总览&quot;&gt;资金流动总览&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;盈余单位&lt;/li&gt;
  &lt;li&gt;赤字单位&lt;/li&gt;
  &lt;li&gt;他们之间可以直接在金融市场达成资金的融通&lt;/li&gt;
  &lt;li&gt;金融中介机构&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;间接融资&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;企业通过银行借钱，投资者通过银行储蓄&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;直接融资&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;企业通过投资银行IPO，发行股票或债券，投资者认购股票或债券&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;功能&quot;&gt;功能&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;跨期转移资源&lt;/li&gt;
  &lt;li&gt;管理风险&lt;/li&gt;
  &lt;li&gt;支付功能&lt;/li&gt;
  &lt;li&gt;归集资源&lt;/li&gt;
  &lt;li&gt;提供信息&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;解决激励&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;事前&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;逆向选择&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;例如保险公司健康险&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;事后&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;委托代理&lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;道德风险&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;例如保险公司自行车保险&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;第六章-金融市场的比率&quot;&gt;第六章 金融市场的比率&lt;/h2&gt;

&lt;h3 id=&quot;利率&quot;&gt;利率&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;一定时期内利息额与借贷资金额即本金的比率&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;违约风险&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;一般来说预期的违约风险越大，贷款利率越高&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;期限&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;期限越长，风险越高，利率要求就越高&lt;/li&gt;
      &lt;li&gt;利率反转 经济衰退&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;汇率风险&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;其他风险&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;流动性风险&lt;/li&gt;
      &lt;li&gt;通货膨胀风险&lt;/li&gt;
      &lt;li&gt;无风险收益率水平&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;持有期收益率投资收益率&quot;&gt;持有期收益率：投资收益率&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;资本品的预期生产能力&lt;/li&gt;
  &lt;li&gt;资本品生产能力的不确定性&lt;/li&gt;
  &lt;li&gt;人们的时间偏好&lt;/li&gt;
  &lt;li&gt;人们的风险偏好程度&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;指数&quot;&gt;指数&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;反映市场整体价格水平的一项指标&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;指数化投资策略&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;一种有效的投资策略&lt;/li&gt;
      &lt;li&gt;投资者简单复制指数中的股票和权重&lt;/li&gt;
      &lt;li&gt;积极的基金投资与指数化投资基金被动型投资形成鲜明对比。但往往被动型投资跑赢积极性投资（CAPM）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;第七章-资产负债表&quot;&gt;第七章 资产负债表&lt;/h2&gt;

&lt;h3 id=&quot;企业重要财务信息报表&quot;&gt;企业重要财务信息报表&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;资产负债表&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;结构等式&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;资产=负债+权益&lt;/li&gt;
          &lt;li&gt;等式左边是企业生产经营活动赖以进行的资产。包括流动资产和固定资产或长期资产&lt;/li&gt;
          &lt;li&gt;等式右边是购买企业资产的资金来源。包括负债（借入的资金）和权益（股东投资的资金）&lt;/li&gt;
          &lt;li&gt;通过资产负债表，我们可以了解企业的总资产规模，资产结构，资本结构等信息&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;项目&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;流动资产&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;一般可以在一年之内变现的资金称为流动资产&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;固定资产&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;长期资产，只可以使用一年以上的资产&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;负债&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;负债是向债权人借的到期归还的钱&lt;/li&gt;
              &lt;li&gt;按照归还时间，一年内归还称为流动负债，超过一年叫长期负债&lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;流动负债&lt;/p&gt;

                &lt;ul&gt;
                  &lt;li&gt;应负债款&lt;/li&gt;
                  &lt;li&gt;应计费用&lt;/li&gt;
                  &lt;li&gt;应付票据&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;长期借款通常由公司发行的债券筹资（有息）、税务局的递延税款（无息）&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;权益&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;股东以优先股或者普通股的形式对公司的投资&lt;/li&gt;
              &lt;li&gt;资产负债表中的资本、资本公积金以及累计的未分配利润（或累积的留存收益）都是属于普通股股东的权益&lt;/li&gt;
              &lt;li&gt;如果公司有回购股份，那么在权益部分还有库存股一项，作为股本的减项&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;利润表（损益表）&lt;/li&gt;
  &lt;li&gt;现金流量表&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;财务报表是我们了解企业经营情况判断企业内在价值的主要信息来源&quot;&gt;财务报表是我们了解企业经营情况，判断企业内在价值的主要信息来源&lt;/h3&gt;

&lt;h3 id=&quot;财务报表的功能&quot;&gt;财务报表的功能&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;向投资者提供有关企业现在、过去的财务信息&lt;/li&gt;
  &lt;li&gt;他向企业的财务计划提供了模版和信息来源&lt;/li&gt;
  &lt;li&gt;他为设定考核管理者的业绩目标提供的依据&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;XMind - Trial Version&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Sep 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/09/16/%E9%87%91%E8%9E%8D%E5%AD%A6%E5%8E%9F%E7%90%86/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/09/16/%E9%87%91%E8%9E%8D%E5%AD%A6%E5%8E%9F%E7%90%86/</guid>
        
        <category>金融学</category>
        
        <category>学习笔记</category>
        
        
      </item>
    
      <item>
        <title>十大排序算法浅涉？</title>
        <description>&lt;h1 id=&quot;排序算法浅涉&quot;&gt;排序算法浅涉&lt;/h1&gt;

&lt;p&gt;排序算法（英语：Sorting algorithm）是一种能将一串数据依照特定排序方式进行排列的一种算法。最常用到的排序方式是数值顺序以及字典顺序。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-17 上午10.56.09.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;稳定的排序？
啥是稳定？？？&lt;/p&gt;

&lt;p&gt;稳定性的大致定义：排序前后两个相等的数相对位置不变，则算法稳定。&lt;/p&gt;

&lt;p&gt;稳定性的好处：从一个键上排序，然后再从另一个键上排序，第一个键排序的结果可以为第二个键排序所用。&lt;/p&gt;

&lt;p&gt;时间复杂度&lt;/p&gt;

&lt;p&gt;时间频度：一个算法中基本语句执行次数称为语句频度或时间频度。记为T(n)。基本语句的执行次数，通常是最内层循环的循环体。&lt;/p&gt;

&lt;p&gt;在刚才提到的时间频度中，n称为问题的规模，当n不断变化时，时间频度T(n)也会不断变化。但有时我们想知道它变化时呈现什么规律。为此，我们引入时间复杂度概念。 一般情况下，算法中基本操作重复执行的次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n),使得当n趋近于无穷大时，T(n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作T(n)=Ｏ(f(n)),称Ｏ(f(n)) 为算法的渐进时间复杂度，简称时间复杂度。&lt;/p&gt;

&lt;p&gt;虽然对f(n)没有规定，但是一般都是取尽可能简单的函数。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-17 上午10.56.29.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度。一个算法在计算机存储器上所占用的存储空间，包括存储算法本身所占用的存储空间，算法的输入输出数据所占用的存储空间和算法在运行过程中临时占用的存储空间这三个方面。&lt;/p&gt;

&lt;p&gt;原地排序就是指在排序过程中不申请多余的存储空间，只利用原来存储待排数据的存储空间进行比较和交换的数据排序。&lt;/p&gt;

&lt;h2 id=&quot;一冒泡排序&quot;&gt;一、冒泡排序&lt;/h2&gt;

&lt;p&gt;1、比较相邻的元素。如果第一个比第二个大，就交换他们两个。
2、对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。 
3、针对所有的元素重复以上的步骤，除了最后一个。 
4、持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-17 上午10.56.48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-17 上午10.57.14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;二选择排序&quot;&gt;二、选择排序&lt;/h2&gt;

&lt;p&gt;首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-17 上午10.57.48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;三快速排序&quot;&gt;三、快速排序&lt;/h2&gt;

&lt;p&gt;快速排序，又称划分交换排序，简称快排，一种排序算法，最早由东尼·霍尔提出。&lt;/p&gt;

&lt;p&gt;快速排序使用分治法策略来把一个序列分为较小和较大的2个子序列，然后递归地排序两个子序列。&lt;/p&gt;

&lt;p&gt;步骤为：&lt;/p&gt;

&lt;p&gt;1、挑选基准值：从数列中挑出一个元素，称为“基准”，
2、分割：重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（与基准值相等的数可以到任何一边）。在这个分割结束之后，对基准值的排序就已经完成，
3、递归排序子序列：递归地将小于基准值元素的子序列和大于基准值元素的子序列排序。&lt;/p&gt;

&lt;p&gt;递归到最底部的判断条件是数列的大小是零或一，此时该数列显然已经有序。&lt;/p&gt;

&lt;p&gt;选取基准值有数种具体方法，此选取方法对排序的时间性能有决定性影响。&lt;/p&gt;

&lt;p&gt;对于分治算法，当每次划分时，算法若都能分成两个等长的子序列时，那么分治算法效率会达到最大。也就是说，基准的选择是很重要的。选择基准的方式决定了两个分割后两个子序列的长度，进而对整个算法的效率产生决定性影响。&lt;/p&gt;

&lt;p&gt;最理想的方法是，选择的基准恰好能把待排序序列分成两个等长的子序列。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-17 上午10.59.00.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-17 上午10.59.18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;它分割了标示为”左边（left）”和”右边（right）”的序列部分，借由移动小于a[pivotIndex]的所有元素到子序列的开头，留下所有大于或等于的元素接在他们后面。在这个过程它也为基准元素找寻最后摆放的位置，也就是它回传的值。它暂时地把基准元素移到子序列的结尾，而不会被前述方式影响到。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-17 上午10.59.45.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-17 上午10.59.59.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;四插入排序&quot;&gt;四、插入排序&lt;/h2&gt;

&lt;p&gt;1、从第一个元素开始，该元素可以认为已经被排序
2、取出下一个元素，在已经排序的元素序列中从后向前扫描
3、如果该元素（已排序）大于新元素，将该元素移到下一位置
4、重复步骤3，直到找到已排序的元素小于或者等于新元素的位置
5、将新元素插入到该位置后
6、重复步骤2~5&lt;/p&gt;

&lt;p&gt;可以采用二分查找法来减少比较操作的数目。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-17 上午11.00.39.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果序列本来是排好序的，那么会触发最好情况。这时只需要n-1次比较即可，没有任何元素移动。所以最好情况下时间复杂度是 O(n)。
如果序列是逆序排列的，那么会触发最坏情况。这时每个元素都需要一步一步地挪到序列首部。所以最坏情况下的时间复杂度是 O(n^2)。
平均情况下的时间复杂度是 O(n^2)&lt;/p&gt;

&lt;h2 id=&quot;五希尔排序&quot;&gt;五、希尔排序&lt;/h2&gt;

&lt;p&gt;希尔排序（Shellsort），也称递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。&lt;/p&gt;

&lt;p&gt;希尔排序是基于插入排序的以下两点性质而提出改进方法的：&lt;/p&gt;

&lt;p&gt;插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率
但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位&lt;/p&gt;

&lt;p&gt;原始的算法实现在最坏的情况下需要进行O(n^2)的比较和交换。 可以使得性能提升至O(n （log n）^2)。这比最好的比较算法的O(n log n)要差一些。&lt;/p&gt;

&lt;p&gt;比较排序有很多性能上的根本限制。在最差情况下，任何一种比较排序至少需要O(n log n）比较操作。这是比较操作所获的信息有限所导致的，或者说是全序集的模糊代数结构所导致的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-17 上午11.01.58.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;希尔排序通过将比较的全部元素分为几个区域来提升插入排序的性能。这样可以让一个元素可以一次性地朝最终位置前进一大步。然后算法再取越来越小的步长进行排序，算法的最后一步就是普通的插入排序，但是到了这步，需排序的数据几乎是已排好的了（此时插入排序较快）&lt;/p&gt;

&lt;p&gt;步长的选择是希尔排序的重要部分。只要最终步长为1任何步长序列都可以工作。算法最开始以一定的步长进行排序。然后会继续以一定步长进行排序，最终算法以步长为1进行排序。当步长为1时，算法变为普通插入排序，这就保证了数据一定会被排序。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-17 上午11.02.35.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-17 上午11.02.48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;六归并排序&quot;&gt;六、归并排序&lt;/h2&gt;

&lt;p&gt;归并操作的工作原理如下：
第一步：申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列
第二步：设定两个指针，最初位置分别为两个已经排序序列的起始位置
第三步：比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置重复步骤3直到某一指针超出序列尾将另一序列剩下的所有元素直接复制到合并序列尾&lt;/p&gt;

&lt;p&gt;将两个已排好序的数组合并成一个有序的数组,称之为归并排序&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-17 上午11.03.30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-17 上午11.03.47.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/typora-user-images/截屏2020-09-17 上午11.03.59.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;六基数排序&quot;&gt;六、基数排序&lt;/h2&gt;

&lt;p&gt;是一种非比较型整数排序算法
基数排序属于“分配式排序”，又称“桶子法”&lt;/p&gt;

&lt;p&gt;LSD MSD&lt;/p&gt;

&lt;p&gt;LSD的基数排序适用于位数小的数列，如果位数多的话，使用MSD的效率会比较好&lt;/p&gt;

&lt;h2 id=&quot;八堆排序&quot;&gt;八、堆排序&lt;/h2&gt;

&lt;p&gt;堆排序（英语：Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆是一个近似完全二叉树的结构，并同时满足堆积的性质：即子节点的键值或索引总是小于（或者大于）它的父节点。&lt;/p&gt;

&lt;p&gt;从下往上，从左往右&lt;/p&gt;

&lt;p&gt;若以升序排序说明，把数组转换成最大堆积(Max-Heap Heap)，这是一种满足最大堆积性质(Max-Heap Property)的二叉树：对于除了根之外的每个节点i, A[parent(i)] ≥ A[i]。&lt;/p&gt;

&lt;p&gt;重复从最大堆积取出数值最大的结点(把根结点和最后一个结点交换，把交换后的最后一个结点移出堆)，并让残余的堆积维持最大堆积性质。&lt;/p&gt;

&lt;p&gt;堆排序的效率与快排、归并相同，都达到了基于比较的排序算法效率的峰值（时间复杂度为O(nlogn)）
除了高效之外，最大的亮点就是只需要O(1)的辅助空间了，既最高效率又最节省空间
堆排序效率相对稳定，不像快排在最坏情况下时间复杂度会变成O(n^2)），所以无论待排序序列是否有序，堆排序的效率都是O(nlogn)不变（注意这里的稳定特指平均时间复杂度=最坏时间复杂度，不是那个“稳定”，因为堆排序本身是不稳定的）&lt;/p&gt;

&lt;h2 id=&quot;九桶排序&quot;&gt;九、桶排序&lt;/h2&gt;

&lt;h2 id=&quot;十计数排序&quot;&gt;十、计数排序&lt;/h2&gt;

</description>
        <pubDate>Wed, 16 Sep 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/09/16/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%B5%85%E6%B6%89/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/09/16/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%B5%85%E6%B6%89/</guid>
        
        <category>算法</category>
        
        <category>tips</category>
        
        
      </item>
    
  </channel>
</rss>
