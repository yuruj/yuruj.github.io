I"F<h1 id="cs193p1">CS193P（1）</h1>

<p>Swift支持面向对象的编程，还支持函数式编程或面向协议的编程</p>

<p>用户界面范例也称为反应式，它是声明性的而不是命令性的</p>

<p>iOS的基础都是用Objective-C语言编写的，这是C的面向对象版本</p>

<p>Swift完全兼容使用OC，引入了很多现代语言功能，特别是对函数式编程的支持</p>

<p>SwiftUI基于函数式编程，而不是面向对象的编程</p>

<p>SwiftUI都是基于Swit</p>

<p>SwiftUI不能兼容所有领域，但是UIKit可以</p>

<p>Core Data 面向对象数据库</p>

<p>import Foundation 是一种数组、字典和字符串</p>

<p>SwiftUI依赖于Foundation，所以import SwiftUI后不用import Foundation</p>

<p>struct ContentView: View 声明ContentView的行为类似于View 这不是面向对象编程，这是功能编程</p>

<p>var body 其值不在内存中，而是计算此var 计算属性</p>

<p>Swift是一种非常强类型的语言。这意味着每一个变量都有特定的类型，并始终具有价值</p>

<p>RoundedRectangle()</p>

<p>ZStack(content:{})</p>

<p>Shapes can be stroke</p>

<p>.stroke(lineWidth:) return another view</p>

<p>.foregroundColor(Color.orange)</p>

<p>.padding()</p>

<p>里面的会屏蔽外面的</p>

<p>RoundedRectangle(cornerRadius: 10.0).fill(Color.white)</p>

<p>RoundedRectangle(cornerRadius: 10.0).stroke(lineWidth: 3)</p>

<p>.font(Font.largeTitle)</p>

<p>ForEach(iteratablething, content: { index in</p>

<p>})</p>

<p>直接使用产生多个预览 制作多个视图的一种方法 返回多个视图</p>

<p>HStack(spacing: ,content: {</p>

<p>​	ForEach()</p>

<p>})</p>

<p>只返回一个视图</p>

<p>.padding(.top, 10)</p>

<p>ZStack允许放置if</p>

<p><img src="/img/typora-user-images/截屏2020-09-10 下午7.08.06.png" alt="" /></p>

:ET