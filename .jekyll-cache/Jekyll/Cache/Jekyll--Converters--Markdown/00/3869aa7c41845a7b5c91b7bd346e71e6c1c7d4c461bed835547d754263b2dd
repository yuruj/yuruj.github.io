I"o<h2 id="39组合总和中等">39.组合总和（中等</h2>

<h3 id="题目描述">题目描述</h3>

<p>给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合</p>

<p>candidates 中的数字可以无限制重复被选取</p>

<h3 id="解答">解答</h3>

<p>这类寻找所有可行解的题，我们都可以尝试用搜索回溯的方法来解决</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="n">candidatesSize_tmp</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">ansSize</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">combineSize</span><span class="p">;</span>

<span class="kt">int</span><span class="o">*</span> <span class="n">ansColumnSize</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">dfs</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">candidates</span><span class="p">,</span> <span class="kt">int</span> <span class="n">target</span><span class="p">,</span> <span class="kt">int</span><span class="o">**</span> <span class="n">ans</span><span class="p">,</span> <span class="kt">int</span><span class="o">*</span> <span class="n">combine</span><span class="p">,</span> <span class="kt">int</span> <span class="n">idx</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">idx</span> <span class="o">==</span> <span class="n">candidatesSize_tmp</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">target</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span><span class="o">*</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">*</span> <span class="n">combineSize</span><span class="p">);</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">combineSize</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">combine</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="p">}</span>
        <span class="n">ans</span><span class="p">[</span><span class="n">ansSize</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
        <span class="n">ansColumnSize</span><span class="p">[</span><span class="n">ansSize</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">combineSize</span><span class="p">;</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// 直接跳过</span>
    <span class="n">dfs</span><span class="p">(</span><span class="n">candidates</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">ans</span><span class="p">,</span> <span class="n">combine</span><span class="p">,</span> <span class="n">idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
    <span class="c1">// 选择当前数</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">target</span> <span class="o">-</span> <span class="n">candidates</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">combine</span><span class="p">[</span><span class="n">combineSize</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">candidates</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>
        <span class="n">dfs</span><span class="p">(</span><span class="n">candidates</span><span class="p">,</span> <span class="n">target</span> <span class="o">-</span> <span class="n">candidates</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">ans</span><span class="p">,</span> <span class="n">combine</span><span class="p">,</span> <span class="n">idx</span><span class="p">);</span>
        <span class="n">combineSize</span><span class="o">--</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span><span class="o">**</span> <span class="nf">combinationSum</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">candidates</span><span class="p">,</span> <span class="kt">int</span> <span class="n">candidatesSize</span><span class="p">,</span> <span class="kt">int</span> <span class="n">target</span><span class="p">,</span> <span class="kt">int</span><span class="o">*</span> <span class="n">returnSize</span><span class="p">,</span> <span class="kt">int</span><span class="o">**</span> <span class="n">returnColumnSizes</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">candidatesSize_tmp</span> <span class="o">=</span> <span class="n">candidatesSize</span><span class="p">;</span>
    <span class="n">ansSize</span> <span class="o">=</span> <span class="n">combineSize</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span><span class="o">**</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="o">*</span> <span class="mi">1001</span><span class="p">);</span>
    <span class="n">ansColumnSize</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">*</span> <span class="mi">1001</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">combine</span><span class="p">[</span><span class="mi">2001</span><span class="p">];</span>
    <span class="n">dfs</span><span class="p">(</span><span class="n">candidates</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">ans</span><span class="p">,</span> <span class="n">combine</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="o">*</span><span class="n">returnSize</span> <span class="o">=</span> <span class="n">ansSize</span><span class="p">;</span>
    <span class="o">*</span><span class="n">returnColumnSizes</span> <span class="o">=</span> <span class="n">ansColumnSize</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>由于搜索回溯的过程中一定存在一些优秀的剪枝方法来使得程序运行得更快，这里只给出了最朴素不含剪枝的方法</p>

<h2 id="40组合总和2中等">40.组合总和2（中等</h2>

<h3 id="题目描述-1">题目描述</h3>

<p>给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合</p>

<p>candidates 中的每个数字在每个组合中只能使用一次</p>

<h3 id="解答-1">解答</h3>

<p>由于我们需要求出所有和为target的组合，并且每个数只能使用一次，因此我们可以使用递归 + 回溯的方法来解决这个问题</p>

<p>可以使用一个哈希映射（HashMap）统计数组candidates中每个数出现的次数</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
</pre></td><td class="rouge-code"><pre><span class="kt">int</span><span class="o">**</span> <span class="n">ans</span><span class="p">;</span>
<span class="kt">int</span><span class="o">*</span> <span class="n">ansColumnSizes</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">ansSize</span><span class="p">;</span>

<span class="kt">int</span><span class="o">*</span> <span class="n">sequence</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">sequenceSize</span><span class="p">;</span>

<span class="kt">int</span><span class="o">**</span> <span class="n">freq</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">freqSize</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">dfs</span><span class="p">(</span><span class="kt">int</span> <span class="n">pos</span><span class="p">,</span> <span class="kt">int</span> <span class="n">rest</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">rest</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span><span class="o">*</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">*</span> <span class="n">sequenceSize</span><span class="p">);</span>
        <span class="n">memcpy</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="n">sequence</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">*</span> <span class="n">sequenceSize</span><span class="p">);</span>
        <span class="n">ans</span><span class="p">[</span><span class="n">ansSize</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
        <span class="n">ansColumnSizes</span><span class="p">[</span><span class="n">ansSize</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">sequenceSize</span><span class="p">;</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">pos</span> <span class="o">==</span> <span class="n">freqSize</span> <span class="o">||</span> <span class="n">rest</span> <span class="o">&lt;</span> <span class="n">freq</span><span class="p">[</span><span class="n">pos</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">dfs</span><span class="p">(</span><span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">rest</span><span class="p">);</span>

    <span class="kt">int</span> <span class="n">most</span> <span class="o">=</span> <span class="n">fmin</span><span class="p">(</span><span class="n">rest</span> <span class="o">/</span> <span class="n">freq</span><span class="p">[</span><span class="n">pos</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">freq</span><span class="p">[</span><span class="n">pos</span><span class="p">][</span><span class="mi">1</span><span class="p">]);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">most</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">sequence</span><span class="p">[</span><span class="n">sequenceSize</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">freq</span><span class="p">[</span><span class="n">pos</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
        <span class="n">dfs</span><span class="p">(</span><span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">rest</span> <span class="o">-</span> <span class="n">i</span> <span class="o">*</span> <span class="n">freq</span><span class="p">[</span><span class="n">pos</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="n">sequenceSize</span> <span class="o">-=</span> <span class="n">most</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">comp</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span><span class="o">*</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">a</span> <span class="o">-</span> <span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span><span class="o">**</span> <span class="nf">combinationSum2</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">candidates</span><span class="p">,</span> <span class="kt">int</span> <span class="n">candidatesSize</span><span class="p">,</span> <span class="kt">int</span> <span class="n">target</span><span class="p">,</span> <span class="kt">int</span><span class="o">*</span> <span class="n">returnSize</span><span class="p">,</span> <span class="kt">int</span><span class="o">**</span> <span class="n">returnColumnSizes</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2001</span><span class="p">);</span>
    <span class="n">ansColumnSizes</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2001</span><span class="p">);</span>
    <span class="n">sequence</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2001</span><span class="p">);</span>
    <span class="n">freq</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2001</span><span class="p">);</span>
    <span class="n">ansSize</span> <span class="o">=</span> <span class="n">sequenceSize</span> <span class="o">=</span> <span class="n">freqSize</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="n">qsort</span><span class="p">(</span><span class="n">candidates</span><span class="p">,</span> <span class="n">candidatesSize</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">),</span> <span class="n">comp</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">candidatesSize</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">freqSize</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">candidates</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">freq</span><span class="p">[</span><span class="n">freqSize</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
            <span class="n">freq</span><span class="p">[</span><span class="n">freqSize</span><span class="p">]</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span>
            <span class="n">freq</span><span class="p">[</span><span class="n">freqSize</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">candidates</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="n">freq</span><span class="p">[</span><span class="n">freqSize</span><span class="o">++</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="o">++</span><span class="n">freq</span><span class="p">[</span><span class="n">freqSize</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">dfs</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">target</span><span class="p">);</span>
    <span class="o">*</span><span class="n">returnSize</span> <span class="o">=</span> <span class="n">ansSize</span><span class="p">;</span>
    <span class="o">*</span><span class="n">returnColumnSizes</span> <span class="o">=</span> <span class="n">ansColumnSizes</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>一种比较常用的优化方法是，我们将 freq 根据数从小到大排序，这样我们在递归时会先选择小的数，再选择大的数</p>

<h2 id="216组合总和3-中等">216.组合总和3 （中等</h2>

<h3 id="题目">题目</h3>

<p>找出所有相加之和为 <strong><em>n</em></strong> 的 <strong><em>k</em></strong> 个数的组合。组合中只允许含有 1 - 9 的正整数，并且每种组合中不存在重复的数字。</p>

<h3 id="解答1">解答1</h3>

<p>二进制子集枚举</p>

<h3 id="解答2">解答2</h3>

<p>组合枚举</p>

<h2 id="637二叉树的平均值简单">637.二叉树的平均值（简单</h2>

<h3 id="题目-1">题目</h3>

<p>给定一个非空二叉树, 返回一个由每层节点平均值组成的数组。</p>

<h3 id="解答-2">解答</h3>

<p>深度优先搜索</p>

<p>广度优先搜索</p>

<h2 id="79单词搜索中等">79.单词搜索（中等</h2>

<h3 id="题目-2">题目</h3>

<p>给定一个二维网格和一个单词，找出该单词是否存在于网格中。</p>

<p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p>

<h3 id="解答-3">解答</h3>

<p>设函数check(i, j, k)判断以网格的(i, j)位置出发，能否搜索到单词word[k…]，表示字符串word从第k个字符开始的后缀子串。如果能搜索到，则返回true，反之返回false。函数check(i, j, k)的执行步骤如下：</p>

<p>1、如果board[i] [j] != s[k]，当前字符不匹配，直接返回false</p>

<p>2、如果当前已经访问到字符串的末尾，且对应字符依然匹配，此时直接返回true</p>

<p>3、否则，遍历当前位置的所有相邻位置。如果从某个相邻位置出发，能够搜索到子串word[k+1…]，则返回true，否则返回false</p>

<p>这样，我们对每一个位置(i, j)都调用函数check(i, j, 0)进行检查：只要有一处返回true，就说明网格中能够找到相应的单词，否则说明不能找到</p>

<p>为了防止重复遍历相同的位置，需要额外维护一个与board等大的visited数组，用于标识每个位置是否被访问过。每次遍历相邻位置时，需要跳过已经被访问的位置</p>

<h2 id="94二叉树的中序遍历中等">94.二叉树的中序遍历（中等</h2>

<h3 id="题目-3">题目</h3>

<p>给定一个二叉树，返回它的<em>中序</em> 遍历。</p>

<h3 id="解答1-1">解答1</h3>

<p>递归</p>

<p>首先我们需要了解什么是二叉树的中序遍历：按照访问左子树——根节点——右子树的方式遍历这棵树，而在访问左子树或者右子树的时候我们按照同样的方式遍历，直到遍历完整棵树。因此整个遍历过程天然具有递归的性质，我们可以直接用递归函数来模拟这一过程。</p>

<p>定义inorder(root)表示当前遍历到root节点的答案，那么按照定义，我们只要递归调用inorder(root.left)来遍历root节点的左子树，然后将root节点的值加入答案，再递归调用inorder(root.right)来遍历root节点的右子树，递归终止的条件为碰到空节点</p>

<h3 id="解答2-1">解答2</h3>

<p>方法一的递归函数我们也可以用迭代的方式实现，两种方式是等价的，区别在于递归的时候隐式地维护了一个栈，而我们在迭代的时候需要显式地将这个栈模拟出来，其他都相同</p>

<h3 id="解答3">解答3（？</h3>

<p><strong>Morris 遍历算法</strong>是另一种遍历二叉树的方法，它能将非递归的中序遍历空间复杂度降为 O(1)<em>O</em>(1)。</p>

<p>Morris遍历算法整体步骤如下（假设当前遍历到的节点为x）：</p>

<p>1、如果x无左孩子。先将x的值加入答案数组，在访问x的右孩子，即x = x.right</p>

<p>2、如果x有左孩子，则找到x左子树上最右的节点，我们记为predecessor。根据predecessor的右孩子是否为空，进行如下操作</p>

<p>​		如果predecessor的右孩子为空，则将其右孩子指向x，然后访问x的左孩子，即x = x.left</p>

<p>​		如果predecessor的右孩子不为空，则此时其右孩子指向x，说明我们已经遍历完x的左子树，我们将predecessor的右孩子置空，将x的值加入答案数组，然后访问x的右孩子，即x = x.right</p>

<p>3、重复上述操作，直至访问完整棵树</p>

<h2 id="37解数独困难">37.解数独（困难</h2>

<h3 id="题目-4">题目</h3>

<p>编写一个程序，通过已填充的空格来解决数独问题。</p>

<h3 id="解答-4">解答</h3>

<p>我们可以考虑按照「行优先」的顺序依次枚举每一个空白格中填的数字，通过递归 + 回溯的方法枚举所有可能的填法。当递归到最后一个空白格后，如果仍然没有冲突，说明我们找到了答案；在递归的过程中，如果当前的空白格不能填下任何一个数字，那么就进行回溯。</p>

<p>由于每个数字在同一行、同一列、同一个九宫格中只会出现一次，因此我们可以使用 line[i]，column[j]，block[x] [y]分别表示第 i 行，第 j 列，第 (x,y) 个九宫格中填写数字的情况。在下面给出的三种方法中，我们将会介绍两种不同的表示填写数字情况的方法。</p>

<p>九宫格的范围为0≤x≤2以及0≤y≤2</p>

<p>具体的，第i行第j列的格子位于第([i/3], [j/3])个九宫格内，其中[u]表示对u向下取整</p>

<h4 id="方法一递归思路">方法一：递归思路</h4>

<p>最容易想到的方法是用一个数组记录每个数字是否出现。由于我们可以填写的数字范围为 [1, 9]，而数组的下标从 0 开始，因此在存储时，我们使用一个长度为 9 的布尔类型的数组，其中 i 个元素的值为True，当且仅当数字i+1出现过。例如我们用line[2] [3]=True 表示数字 4 在第 2 行已经出现过，那么当我们在遍历到第 2 行的空白格时，就不能填入数字 4。</p>

<p>算法</p>

<p>我们首先对整个数独数组进行遍历，当我们遍历到第 i 行第 j 列的位置：</p>

<p>如果该位置是一个空白格，那么我们将其加入一个用来存储空白格位置的列表中，方便后续的递归操作；</p>

<p>如果该位置是一个数字 x，那么我们需要将 line[i] [x−1]，column[j] [x−1] 以及 block[⌊i/3⌋] [⌊j/3⌋] [x−1] 均置为True。</p>

<p>当我们结束了遍历过程之后，就可以开始递归枚举。当递归到第 i 行第 j 列的位置时，我们枚举填入的数字 x。根据题目的要求，数字 x 不能和当前行、列、九宫格中已经填入的数字相同，因此line[i] [x−1]，column[j] [x−1] 以及block[⌊i/3⌋] [⌊j/3⌋] [x−1] 必须均为False。</p>

<p>当我们填入了数字 x 之后，我们要将上述的三个值都置为True，并且继续对下一个空白格位置进行递归。在回溯到当前递归层时，我们还要将上述的三个值重新置为False。</p>

<h4 id="方法二位运算优化">方法二：位运算优化（？</h4>

<p>在方法一中，我们使用了长度为 9 的数组表示每个数字是否出现过。我们同样也可以借助位运算，仅使用一个整数表示每个数字是否出现过。</p>

<p>具体地，数 b 的二进制表示的第 i 位（从低到高，最低位为第 0 位）为 1，当且仅当数字 i+1 已经出现过。例如当 b 的二进制表示为(011000100) 时，就表示数字 3，7，8 已经出现过。</p>

<h4 id="方法三枚举优化">方法三：枚举优化（？</h4>

<p>我们可以顺着方法二的思路继续优化下去：</p>

<p>如果一个空白格只有唯一的数可以填入，也就是其对应的 b 值和 b−1 进行按位与运算后得到 0（即 b 中只有一个二进制位为 1）。此时，我们就可以确定这个空白格填入的数，而不用等到递归时再去处理它。这样一来，我们可以不断地对整个数独进行遍历，将可以唯一确定的空白格全部填入对应的数。随后我们再使用与方法二相同的方法对剩余无法唯一确定的空白格进行递归 + 回溯。</p>

:ET