I"<h1 id="cs193p2">CS193P（2）</h1>

<p>MVVM Model-View-ViewModel</p>

<p>反应式用户界面 代码组织模型</p>

<p>UIKit遵循MVC</p>

<p>命令式模型为什么对UI不利：需要时间维度，函数调用的时间顺序</p>

<p>声明型模型：时间独立</p>

<p>可以确定总是看起来就像你看到的在前面声明的代码中，优势在于理解您的代码将如何工作，确保没有随机的事情发生</p>

<p>反应式编程，对模型中的更改作出反应</p>

<p>model可能很复杂 viewmodel作为该模型数据的解释器，可简化一些数据结构，有助于实时更新的实现</p>

<p>viewmodel不会直接和view对话，没有视图的指针</p>

<p><img src="/img/typora-user-images/截屏2020-09-11 上午10.25.21.png" alt="" /></p>

<p>What about the other direction？</p>

<p>另一种相关的架构Model-View-Intent，SwiftUI尚未实现一个意图系统</p>

<p>意图作为一种concept</p>

<p><img src="/img/typora-user-images/截屏2020-09-11 上午10.30.03.png" alt="" /></p>

<p>结构和类大致相似</p>

<p>struct Value type</p>

<p>class Reference type</p>

<p>函数式编程侧重于事物的功能</p>

<p>面向对象的编程侧重于封装数据，并将功能放入某个容器</p>

<p><img src="/img/typora-user-images/截屏2020-09-11 上午10.49.11.png" alt="" /></p>

<p>Generics 泛型</p>

<p>Example of a user of a don’t care type: Array</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kd">struct</span> <span class="kt">Array</span><span class="o">&lt;</span><span class="kt">Element</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="o">...</span>
  <span class="kd">func</span> <span class="nf">append</span><span class="p">(</span><span class="n">_</span> <span class="nv">element</span><span class="p">:</span> <span class="kt">Element</span><span class="p">)</span> <span class="p">{</span><span class="o">...</span><span class="p">}</span>
<span class="p">}</span>
<span class="k">var</span> <span class="nv">a</span> <span class="o">=</span> <span class="kt">Array</span><span class="o">&lt;</span><span class="kt">Int</span><span class="o">&gt;</span><span class="p">()</span>
<span class="n">a</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Functions as Types 函数类型</p>

<p>Closures本质是内联函数，捕获值</p>

<p>private var model 只能通过EmojiMemoryGame访问</p>

<p>private(set) var model 玻璃门，其他人可以看到model，但只有EmojiMemoryGame能修改model</p>

<p>可以有多个init根据参数选择</p>

<p>类型推断</p>

<p>因为这是函数式编程，所以我们要传递很多函数作为其他函数的参数</p>

<p>我们不能在类或结构上使用任何函数直到所有这些都已初始化</p>

<p>static func 类型上的函数</p>

<p>static let static var</p>

<p>option ？</p>

<p>任何可迭代的东西必须是可识别的 identifiable</p>

<p>swift的print十分强大，可以直接打印很多东西</p>
:ET